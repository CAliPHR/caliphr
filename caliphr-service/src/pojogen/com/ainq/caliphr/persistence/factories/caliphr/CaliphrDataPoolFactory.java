package com.ainq.caliphr.persistence.factories.caliphr;

import com.ainq.caliphr.persistence.model.obj.caliphrDb.*;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.repository.*;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.*;
import com.ainq.caliphr.persistence.util.BasicDataGenerator;
import org.springframework.stereotype.Component;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import java.util.Arrays;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;


/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class CaliphrDataPoolFactory implements ApplicationContextAware, DataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = {"ValueSetCode", "ValueSet", "TemplateRoot", "StatusCode", "State", "SecurityRole", "ResultSupplemental", "ResultPatient", "Result", "ProviderType", "ProviderPhoneNumber", "Provider", "PracticeGroupType", "PracticeGroup", "PracticeAvailableMeasure", "PatientVitalSign", "PatientSocialHistory", "PatientResult", "PatientReasonForVisit", "PatientReasonForReferral", "PatientProcedure", "PatientProblem", "PatientPlanOfCare", "PatientPhoneNumberSecure", "PatientPhoneNumber", "PatientPayer", "PatientNegationDetail", "PatientMedication", "PatientMedicalEquipment", "PatientInstruction", "PatientInfoSecure", "PatientInfo", "PatientImmunization", "PatientFuncCogStatus", "PatientFamilyHistory", "PatientEncounterDiagnosis", "PatientEncounter", "PatientAllergy", "PatientAdvancedDirective", "ParseStatusType", "OrganizationType", "Organization", "HqmfPopulationSet", "HqmfPopulation", "HqmfMeasurePeriod", "HqmfDocument", "HqmfDataCriteria", "HqmfAttribute", "EhrVendor", "Domain", "DocumentType", "CodeSystem", "CodeMappingType", "CodeMappingToCode", "CodeMapping", "Code", "ClinicalDocumentParseError", "ClinicalDocument", "Bundle", "AuditType", "ApplicationUserSecurity", "ApplicationUserPasswordRequest", "ApplicationUserPasswordHistory", "ApplicationUserAudit", "ApplicationUser"};
	/** DB commit order. */
	private static final Class<?>[] classCommitOrder = {ValueSetCode.class, ValueSet.class, TemplateRoot.class, StatusCode.class, State.class, SecurityRole.class, ResultSupplemental.class, ResultPatient.class, Result.class, ProviderType.class, ProviderPhoneNumber.class, Provider.class, PracticeGroupType.class, PracticeGroup.class, PracticeAvailableMeasure.class, PatientVitalSign.class, PatientSocialHistory.class, PatientResult.class, PatientReasonForVisit.class, PatientReasonForReferral.class, PatientProcedure.class, PatientProblem.class, PatientPlanOfCare.class, PatientPhoneNumberSecure.class, PatientPhoneNumber.class, PatientPayer.class, PatientNegationDetail.class, PatientMedication.class, PatientMedicalEquipment.class, PatientInstruction.class, PatientInfoSecure.class, PatientInfo.class, PatientImmunization.class, PatientFuncCogStatus.class, PatientFamilyHistory.class, PatientEncounterDiagnosis.class, PatientEncounter.class, PatientAllergy.class, PatientAdvancedDirective.class, ParseStatusType.class, OrganizationType.class, Organization.class, HqmfPopulationSet.class, HqmfPopulation.class, HqmfMeasurePeriod.class, HqmfDocument.class, HqmfDataCriteria.class, HqmfAttribute.class, EhrVendor.class, Domain.class, DocumentType.class, CodeSystem.class, CodeMappingType.class, CodeMappingToCode.class, CodeMapping.class, Code.class, ClinicalDocumentParseError.class, ClinicalDocument.class, Bundle.class, AuditType.class, ApplicationUserSecurity.class, ApplicationUserPasswordRequest.class, ApplicationUserPasswordHistory.class, ApplicationUserAudit.class, ApplicationUser.class};

	static{
		// Store table deps for possible use. 
 		tableDeps.put("PatientInfoSecure", "PatientInfo");
 		tableDeps.put("PatientPhoneNumberSecure", "PatientPhoneNumber");
	}
	
	/** For cyclic classes. */
	static ApplicationContext context;
	 
	public void setApplicationContext(ApplicationContext ctx){
	    context = ctx;
	}




    /**
     * Data pool factory for ApplicationUser.
     * @return ApplicationUserA ApplicationUser object
     */
    public static ApplicationUser getApplicationUser() {

        ApplicationUser applicationUser = new ApplicationUser();    
        
        applicationUser.setDateCreated(BasicDataGenerator.generateDate());
        applicationUser.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUser.setDateLastLogin(BasicDataGenerator.generateDate());
        applicationUser.setDatePasswordChanged(BasicDataGenerator.generateDate());
        applicationUser.setDateUpdated(BasicDataGenerator.generateDate());
        applicationUser.setEmailAddress(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setFirstName(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setLastLoginIpAddress(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setLastName(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setPasswordHash(BasicDataGenerator.generateRandomString(2147483647));
        applicationUser.setUserCreated(BasicDataGenerator.generateRandomInt());
        applicationUser.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return applicationUser;
    }

    /**
     * Data pool factory for ApplicationUserAudit.
     * @return ApplicationUserAudit A ApplicationUserAudit object
     */
    public static ApplicationUserAudit getApplicationUserAudit() {

        ApplicationUserAudit applicationUserAudit =  getApplicationUserAudit(
	        null, null);

		return applicationUserAudit;
       
    }

     /**
     * Data pool factory for ApplicationUserAudit.
     * @param auditType A valid AuditType object
     * @param user A valid ApplicationUser object
     * @return ApplicationUserAudit A ApplicationUserAudit object
     */
    public static ApplicationUserAudit getApplicationUserAudit(AuditType auditType, ApplicationUser user) {
        ApplicationUserAudit applicationUserAudit = new ApplicationUserAudit();     
		if (auditType != null) {
			auditType.addApplicationUserAudit (applicationUserAudit);
		}
        applicationUserAudit.setClassName(BasicDataGenerator.generateRandomString(2147483647));
        applicationUserAudit.setDateCreated(BasicDataGenerator.generateDate());
        applicationUserAudit.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUserAudit.setDateUpdated(BasicDataGenerator.generateDate());
        applicationUserAudit.setJsonRequest(BasicDataGenerator.generateRandomString(2147483647));
        applicationUserAudit.setMethodName(BasicDataGenerator.generateRandomString(2147483647));
		if (user != null) {
			user.addApplicationUserAudit (applicationUserAudit);
		}
        applicationUserAudit.setUserCreated(BasicDataGenerator.generateRandomInt());
        applicationUserAudit.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return applicationUserAudit;
    }

    /**
     * Data pool factory for ApplicationUserPasswordHistory.
     * @return ApplicationUserPasswordHistory A ApplicationUserPasswordHistory object
     */
    public static ApplicationUserPasswordHistory getApplicationUserPasswordHistory() {

        ApplicationUserPasswordHistory applicationUserPasswordHistory =  getApplicationUserPasswordHistory(
	        null);

		return applicationUserPasswordHistory;
       
    }

     /**
     * Data pool factory for ApplicationUserPasswordHistory.
     * @param user A valid ApplicationUser object
     * @return ApplicationUserPasswordHistory A ApplicationUserPasswordHistory object
     */
    public static ApplicationUserPasswordHistory getApplicationUserPasswordHistory(ApplicationUser user) {
        ApplicationUserPasswordHistory applicationUserPasswordHistory = new ApplicationUserPasswordHistory();     
        applicationUserPasswordHistory.setDateCreated(BasicDataGenerator.generateDate());
        applicationUserPasswordHistory.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUserPasswordHistory.setDateUpdated(BasicDataGenerator.generateDate());
        applicationUserPasswordHistory.setPasswordHash(BasicDataGenerator.generateRandomString(2147483647));
		if (user != null) {
			user.addApplicationUserPasswordHistory (applicationUserPasswordHistory);
		}
        applicationUserPasswordHistory.setUserCreated(BasicDataGenerator.generateRandomInt());
        applicationUserPasswordHistory.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return applicationUserPasswordHistory;
    }

    /**
     * Data pool factory for ApplicationUserPasswordRequest.
     * @return ApplicationUserPasswordRequest A ApplicationUserPasswordRequest object
     */
    public static ApplicationUserPasswordRequest getApplicationUserPasswordRequest() {

        ApplicationUserPasswordRequest applicationUserPasswordRequest =  getApplicationUserPasswordRequest(
	        null);

		return applicationUserPasswordRequest;
       
    }

     /**
     * Data pool factory for ApplicationUserPasswordRequest.
     * @param user A valid ApplicationUser object
     * @return ApplicationUserPasswordRequest A ApplicationUserPasswordRequest object
     */
    public static ApplicationUserPasswordRequest getApplicationUserPasswordRequest(ApplicationUser user) {
        ApplicationUserPasswordRequest applicationUserPasswordRequest = new ApplicationUserPasswordRequest();     
        applicationUserPasswordRequest.setDateCreated(BasicDataGenerator.generateDate());
        applicationUserPasswordRequest.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUserPasswordRequest.setDateUpdated(BasicDataGenerator.generateDate());
        applicationUserPasswordRequest.setDateUuidExpiration(BasicDataGenerator.generateDate());
        applicationUserPasswordRequest.setRequestIpAddress(BasicDataGenerator.generateRandomString(2147483647));
		if (user != null) {
			user.addApplicationUserPasswordRequest (applicationUserPasswordRequest);
		}
        applicationUserPasswordRequest.setUserCreated(BasicDataGenerator.generateRandomInt());
        applicationUserPasswordRequest.setUserUpdated(BasicDataGenerator.generateRandomInt());
        applicationUserPasswordRequest.setUuid(BasicDataGenerator.generateRandomString(2147483647));

        return applicationUserPasswordRequest;
    }

    /**
     * Data pool factory for ApplicationUserSecurity.
     * @return ApplicationUserSecurity A ApplicationUserSecurity object
     */
    public static ApplicationUserSecurity getApplicationUserSecurity() {

        ApplicationUserSecurity applicationUserSecurity =  getApplicationUserSecurity(
	        null, null, null);

		return applicationUserSecurity;
       
    }

     /**
     * Data pool factory for ApplicationUserSecurity.
     * @param provider A valid Provider object
     * @param role A valid SecurityRole object
     * @param user A valid ApplicationUser object
     * @return ApplicationUserSecurity A ApplicationUserSecurity object
     */
    public static ApplicationUserSecurity getApplicationUserSecurity(Provider provider, SecurityRole role, ApplicationUser user) {
        ApplicationUserSecurity applicationUserSecurity = new ApplicationUserSecurity();     
        applicationUserSecurity.setDateCreated(BasicDataGenerator.generateDate());
        applicationUserSecurity.setDateDisabled(BasicDataGenerator.generateDate());
        applicationUserSecurity.setDateUpdated(BasicDataGenerator.generateDate());
		if (provider != null) {
			provider.addApplicationUserSecurity (applicationUserSecurity);
		}
		if (role != null) {
			role.addApplicationUserSecurity (applicationUserSecurity);
		}
		if (user != null) {
			user.addApplicationUserSecurity (applicationUserSecurity);
		}
        applicationUserSecurity.setUserCreated(BasicDataGenerator.generateRandomInt());
        applicationUserSecurity.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return applicationUserSecurity;
    }

    /**
     * Data pool factory for AuditType.
     * @return AuditTypeA AuditType object
     */
    public static AuditType getAuditType() {

        AuditType auditType = new AuditType();    
        
        auditType.setAuditTypeDescription(BasicDataGenerator.generateRandomString(2147483647));
        auditType.setAuditTypeName(BasicDataGenerator.generateRandomString(2147483647));
        auditType.setDateCreated(BasicDataGenerator.generateDate());
        auditType.setDateDisabled(BasicDataGenerator.generateDate());
        auditType.setDateUpdated(BasicDataGenerator.generateDate());
        auditType.setUserCreated(BasicDataGenerator.generateRandomInt());
        auditType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return auditType;
    }

    /**
     * Data pool factory for Bundle.
     * @return BundleA Bundle object
     */
    public static Bundle getBundle() {

        Bundle bundle = new Bundle();    
        
        bundle.setBundleVersion(BasicDataGenerator.generateRandomString(2147483647));
        bundle.setDateCreated(BasicDataGenerator.generateDate());
        bundle.setDateDisabled(BasicDataGenerator.generateDate());
        bundle.setDateUpdated(BasicDataGenerator.generateDate());
        bundle.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        bundle.setUserCreated(BasicDataGenerator.generateRandomInt());
        bundle.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return bundle;
    }

    /**
     * Data pool factory for ClinicalDocument.
     * @return ClinicalDocument A ClinicalDocument object
     */
    public static ClinicalDocument getClinicalDocument() {

        ClinicalDocument clinicalDocument =  getClinicalDocument(
	        null, null, null);

		return clinicalDocument;
       
    }

     /**
     * Data pool factory for ClinicalDocument.
     * @param parseStatusType A valid ParseStatusType object
     * @param patient A valid PatientInfo object
     * @param type A valid DocumentType object
     * @return ClinicalDocument A ClinicalDocument object
     */
    public static ClinicalDocument getClinicalDocument(ParseStatusType parseStatusType, PatientInfo patient, DocumentType type) {
        ClinicalDocument clinicalDocument = new ClinicalDocument();     
        clinicalDocument.setCareSetting(BasicDataGenerator.generateRandomString(250));
        clinicalDocument.setDateCreated(BasicDataGenerator.generateDate());
        clinicalDocument.setDateDisabled(BasicDataGenerator.generateDate());
        clinicalDocument.setDateUpdated(BasicDataGenerator.generateDate());
        clinicalDocument.setFileName(BasicDataGenerator.generateRandomString(2147483647));
        clinicalDocument.setFileSizeKb(BasicDataGenerator.generateRandomDecimal(0, 0));
		if (parseStatusType != null) {
			parseStatusType.addClinicalDocument (clinicalDocument);
		}
        clinicalDocument.setParseTime(BasicDataGenerator.generateRandomDecimal(0, 0));
		if (patient != null) {
			patient.addClinicalDocument (clinicalDocument);
		}
        clinicalDocument.setTitle(BasicDataGenerator.generateRandomString(2147483647));
		if (type != null) {
			type.addClinicalDocument (clinicalDocument);
		}
        clinicalDocument.setUserCreated(BasicDataGenerator.generateRandomInt());
        clinicalDocument.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return clinicalDocument;
    }

    /**
     * Data pool factory for ClinicalDocumentParseError.
     * @return ClinicalDocumentParseError A ClinicalDocumentParseError object
     */
    public static ClinicalDocumentParseError getClinicalDocumentParseError() {

        ClinicalDocumentParseError clinicalDocumentParseError =  getClinicalDocumentParseError(
	        null);

		return clinicalDocumentParseError;
       
    }

     /**
     * Data pool factory for ClinicalDocumentParseError.
     * @param document A valid ClinicalDocument object
     * @return ClinicalDocumentParseError A ClinicalDocumentParseError object
     */
    public static ClinicalDocumentParseError getClinicalDocumentParseError(ClinicalDocument document) {
        ClinicalDocumentParseError clinicalDocumentParseError = new ClinicalDocumentParseError();     
        clinicalDocumentParseError.setDateCreated(BasicDataGenerator.generateDate());
        clinicalDocumentParseError.setDateDisabled(BasicDataGenerator.generateDate());
        clinicalDocumentParseError.setDateUpdated(BasicDataGenerator.generateDate());
		if (document != null) {
			document.addClinicalDocumentParseError (clinicalDocumentParseError);
		}
        clinicalDocumentParseError.setStackTrace(BasicDataGenerator.generateRandomString(2147483647));
        clinicalDocumentParseError.setUserCreated(BasicDataGenerator.generateRandomInt());
        clinicalDocumentParseError.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return clinicalDocumentParseError;
    }

    /**
     * Data pool factory for Code.
     * @return Code A Code object
     */
    public static Code getCode() {

        Code code =  getCode(
	        null);

		return code;
       
    }

     /**
     * Data pool factory for Code.
     * @param codeSystem A valid CodeSystem object
     * @return Code A Code object
     */
    public static Code getCode(CodeSystem codeSystem) {
        Code code = new Code();     
        code.setCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (codeSystem != null) {
			codeSystem.addCode (code);
		}
        code.setDateCreated(BasicDataGenerator.generateDate());
        code.setDateDisabled(BasicDataGenerator.generateDate());
        code.setDateUpdated(BasicDataGenerator.generateDate());
        code.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        code.setLatestCdaDescription(BasicDataGenerator.generateRandomString(2147483647));
        code.setUserCreated(BasicDataGenerator.generateRandomInt());
        code.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return code;
    }

    /**
     * Data pool factory for CodeMapping.
     * @return CodeMapping A CodeMapping object
     */
    public static CodeMapping getCodeMapping() {

        CodeMapping codeMapping =  getCodeMapping(
	        null, null, null, null);

		return codeMapping;
       
    }

     /**
     * Data pool factory for CodeMapping.
     * @param fromCode A valid Code object
     * @param group A valid PracticeGroup object
     * @param type A valid CodeMappingType object
     * @param vendor A valid EhrVendor object
     * @return CodeMapping A CodeMapping object
     */
    public static CodeMapping getCodeMapping(Code fromCode, PracticeGroup group, CodeMappingType type, EhrVendor vendor) {
        CodeMapping codeMapping = new CodeMapping();     
        codeMapping.setDateCreated(BasicDataGenerator.generateDate());
        codeMapping.setDateDisabled(BasicDataGenerator.generateDate());
        codeMapping.setDateUpdated(BasicDataGenerator.generateDate());
		if (fromCode != null) {
			fromCode.addCodeMapping (codeMapping);
		}
        codeMapping.setFromCodeName(BasicDataGenerator.generateRandomString(2147483647));
        codeMapping.setFromCodeSystem(BasicDataGenerator.generateRandomString(2147483647));
        codeMapping.setFromDisplayName(BasicDataGenerator.generateRandomString(2147483647));
		if (group != null) {
			group.addCodeMapping (codeMapping);
		}
        codeMapping.setIsGloballyMapped(BasicDataGenerator.generateRandomBoolean());
		if (type != null) {
			type.addCodeMapping (codeMapping);
		}
        codeMapping.setUserCreated(BasicDataGenerator.generateRandomInt());
        codeMapping.setUserUpdated(BasicDataGenerator.generateRandomInt());
		if (vendor != null) {
			vendor.addCodeMapping (codeMapping);
		}

        return codeMapping;
    }

    /**
     * Data pool factory for CodeMappingToCode.
     * @return CodeMappingToCode A CodeMappingToCode object
     */
    public static CodeMappingToCode getCodeMappingToCode() {

        CodeMappingToCode codeMappingToCode =  getCodeMappingToCode(
	        null, null);

		return codeMappingToCode;
       
    }

     /**
     * Data pool factory for CodeMappingToCode.
     * @param codeMapping A valid CodeMapping object
     * @param toCode A valid Code object
     * @return CodeMappingToCode A CodeMappingToCode object
     */
    public static CodeMappingToCode getCodeMappingToCode(CodeMapping codeMapping, Code toCode) {
        CodeMappingToCode codeMappingToCode = new CodeMappingToCode();     
		if (codeMapping != null) {
			codeMapping.addCodeMappingToCode (codeMappingToCode);
		}
        codeMappingToCode.setDateCreated(BasicDataGenerator.generateDate());
        codeMappingToCode.setDateDisabled(BasicDataGenerator.generateDate());
        codeMappingToCode.setDateUpdated(BasicDataGenerator.generateDate());
		if (toCode != null) {
			toCode.addCodeMappingToCode (codeMappingToCode);
		}
        codeMappingToCode.setUserCreated(BasicDataGenerator.generateRandomInt());
        codeMappingToCode.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return codeMappingToCode;
    }

    /**
     * Data pool factory for CodeMappingType.
     * @return CodeMappingTypeA CodeMappingType object
     */
    public static CodeMappingType getCodeMappingType() {

        CodeMappingType codeMappingType = new CodeMappingType();    
        
        codeMappingType.setDateCreated(BasicDataGenerator.generateDate());
        codeMappingType.setDateDisabled(BasicDataGenerator.generateDate());
        codeMappingType.setDateUpdated(BasicDataGenerator.generateDate());
        codeMappingType.setTypeDescription(BasicDataGenerator.generateRandomString(2147483647));
        codeMappingType.setTypeName(BasicDataGenerator.generateRandomString(2147483647));
        codeMappingType.setUserCreated(BasicDataGenerator.generateRandomInt());
        codeMappingType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return codeMappingType;
    }

    /**
     * Data pool factory for CodeSystem.
     * @return CodeSystemA CodeSystem object
     */
    public static CodeSystem getCodeSystem() {

        CodeSystem codeSystem = new CodeSystem();    
        
        codeSystem.setCodeSystemName(BasicDataGenerator.generateRandomString(2147483647));
        codeSystem.setDateCreated(BasicDataGenerator.generateDate());
        codeSystem.setDateDisabled(BasicDataGenerator.generateDate());
        codeSystem.setDateUpdated(BasicDataGenerator.generateDate());
        codeSystem.setHl7Oid(BasicDataGenerator.generateRandomString(250));
        codeSystem.setUserCreated(BasicDataGenerator.generateRandomInt());
        codeSystem.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return codeSystem;
    }

    /**
     * Data pool factory for DocumentType.
     * @return DocumentTypeA DocumentType object
     */
    public static DocumentType getDocumentType() {

        DocumentType documentType = new DocumentType();    
        
        documentType.setDateCreated(BasicDataGenerator.generateDate());
        documentType.setDateDisabled(BasicDataGenerator.generateDate());
        documentType.setDateUpdated(BasicDataGenerator.generateDate());
        documentType.setHl7Oid(BasicDataGenerator.generateRandomString(250));
        documentType.setTypeName(BasicDataGenerator.generateRandomString(250));
        documentType.setUserCreated(BasicDataGenerator.generateRandomInt());
        documentType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return documentType;
    }

    /**
     * Data pool factory for Domain.
     * @return DomainA Domain object
     */
    public static Domain getDomain() {

        Domain domain = new Domain();    
        
        domain.setDateCreated(BasicDataGenerator.generateDate());
        domain.setDateDisabled(BasicDataGenerator.generateDate());
        domain.setDateUpdated(BasicDataGenerator.generateDate());
        domain.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        domain.setName(BasicDataGenerator.generateRandomString(250));
        domain.setUserCreated(BasicDataGenerator.generateRandomInt());
        domain.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return domain;
    }

    /**
     * Data pool factory for EhrVendor.
     * @return EhrVendorA EhrVendor object
     */
    public static EhrVendor getEhrVendor() {

        EhrVendor ehrVendor = new EhrVendor();    
        
        ehrVendor.setDateCreated(BasicDataGenerator.generateDate());
        ehrVendor.setDateDisabled(BasicDataGenerator.generateDate());
        ehrVendor.setDateUpdated(BasicDataGenerator.generateDate());
        ehrVendor.setUserCreated(BasicDataGenerator.generateRandomInt());
        ehrVendor.setUserUpdated(BasicDataGenerator.generateRandomInt());
        ehrVendor.setVendorDescription(BasicDataGenerator.generateRandomString(2147483647));
        ehrVendor.setVendorName(BasicDataGenerator.generateRandomString(2147483647));

        return ehrVendor;
    }

    /**
     * Data pool factory for HqmfAttribute.
     * @return HqmfAttribute A HqmfAttribute object
     */
    public static HqmfAttribute getHqmfAttribute() {

        HqmfAttribute hqmfAttribute =  getHqmfAttribute(
	        null);

		return hqmfAttribute;
       
    }

     /**
     * Data pool factory for HqmfAttribute.
     * @param hqmfDoc A valid HqmfDocument object
     * @return HqmfAttribute A HqmfAttribute object
     */
    public static HqmfAttribute getHqmfAttribute(HqmfDocument hqmfDoc) {
        HqmfAttribute hqmfAttribute = new HqmfAttribute();     
        hqmfAttribute.setAttributeName(BasicDataGenerator.generateRandomString(250));
        hqmfAttribute.setCode(BasicDataGenerator.generateRandomString(250));
        hqmfAttribute.setCodeObjJson(BasicDataGenerator.generateRandomString(2147483647));
        hqmfAttribute.setDateCreated(BasicDataGenerator.generateDate());
        hqmfAttribute.setDateDisabled(BasicDataGenerator.generateDate());
        hqmfAttribute.setDateUpdated(BasicDataGenerator.generateDate());
		if (hqmfDoc != null) {
			hqmfDoc.addHqmfAttribute (hqmfAttribute);
		}
        hqmfAttribute.setUserCreated(BasicDataGenerator.generateRandomInt());
        hqmfAttribute.setUserUpdated(BasicDataGenerator.generateRandomInt());
        hqmfAttribute.setValueObjJson(BasicDataGenerator.generateRandomString(2147483647));

        return hqmfAttribute;
    }

    /**
     * Data pool factory for HqmfDataCriteria.
     * @return HqmfDataCriteria A HqmfDataCriteria object
     */
    public static HqmfDataCriteria getHqmfDataCriteria() {

        HqmfDataCriteria hqmfDataCriteria =  getHqmfDataCriteria(
	        null);

		return hqmfDataCriteria;
       
    }

     /**
     * Data pool factory for HqmfDataCriteria.
     * @param hqmfDoc A valid HqmfDocument object
     * @return HqmfDataCriteria A HqmfDataCriteria object
     */
    public static HqmfDataCriteria getHqmfDataCriteria(HqmfDocument hqmfDoc) {
        HqmfDataCriteria hqmfDataCriteria = new HqmfDataCriteria();     
        hqmfDataCriteria.setCodeListId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDataCriteria.setDataCriteriaJson(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDataCriteria.setDateCreated(BasicDataGenerator.generateDate());
        hqmfDataCriteria.setDateDisabled(BasicDataGenerator.generateDate());
        hqmfDataCriteria.setDateUpdated(BasicDataGenerator.generateDate());
        hqmfDataCriteria.setDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (hqmfDoc != null) {
			hqmfDoc.addHqmfDataCriteria (hqmfDataCriteria);
		}
        hqmfDataCriteria.setHqmfId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDataCriteria.setTitle(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDataCriteria.setUserCreated(BasicDataGenerator.generateRandomInt());
        hqmfDataCriteria.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return hqmfDataCriteria;
    }

    /**
     * Data pool factory for HqmfDocument.
     * @return HqmfDocument A HqmfDocument object
     */
    public static HqmfDocument getHqmfDocument() {

        HqmfDocument hqmfDocument =  getHqmfDocument(
	        null, null, null, null);

		return hqmfDocument;
       
    }

     /**
     * Data pool factory for HqmfDocument.
     * @param bundle A valid Bundle object
     * @param domain A valid Domain object
     * @param measurePeriod A valid HqmfMeasurePeriod object
     * @param provider A valid Provider object
     * @return HqmfDocument A HqmfDocument object
     */
    public static HqmfDocument getHqmfDocument(Bundle bundle, Domain domain, HqmfMeasurePeriod measurePeriod, Provider provider) {
        HqmfDocument hqmfDocument = new HqmfDocument();     
		if (bundle != null) {
			bundle.addHqmfDocument (hqmfDocument);
		}
        hqmfDocument.setCmsId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDocument.setDateCreated(BasicDataGenerator.generateDate());
        hqmfDocument.setDateDisabled(BasicDataGenerator.generateDate());
        hqmfDocument.setDateUpdated(BasicDataGenerator.generateDate());
        hqmfDocument.setDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (domain != null) {
			domain.addHqmfDocument (hqmfDocument);
		}
        hqmfDocument.setHqmfId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDocument.setHqmfSetId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDocument.setHqmfVersionNumber(BasicDataGenerator.generateRandomInt());
		if (measurePeriod != null) {
			measurePeriod.addHqmfDocument (hqmfDocument);
		}
		if (provider != null) {
			provider.addHqmfDocument (hqmfDocument);
		}
        hqmfDocument.setTitle(BasicDataGenerator.generateRandomString(2147483647));
        hqmfDocument.setUserCreated(BasicDataGenerator.generateRandomInt());
        hqmfDocument.setUserId(BasicDataGenerator.generateRandomInt());
        hqmfDocument.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return hqmfDocument;
    }

    /**
     * Data pool factory for HqmfMeasurePeriod.
     * @return HqmfMeasurePeriodA HqmfMeasurePeriod object
     */
    public static HqmfMeasurePeriod getHqmfMeasurePeriod() {

        HqmfMeasurePeriod hqmfMeasurePeriod = new HqmfMeasurePeriod();    
        
        hqmfMeasurePeriod.setDateCreated(BasicDataGenerator.generateDate());
        hqmfMeasurePeriod.setDateDisabled(BasicDataGenerator.generateDate());
        hqmfMeasurePeriod.setDateUpdated(BasicDataGenerator.generateDate());
        hqmfMeasurePeriod.setHigh(BasicDataGenerator.generateRandomString(2147483647));
        hqmfMeasurePeriod.setLow(BasicDataGenerator.generateRandomString(2147483647));
        hqmfMeasurePeriod.setUserCreated(BasicDataGenerator.generateRandomInt());
        hqmfMeasurePeriod.setUserUpdated(BasicDataGenerator.generateRandomInt());
        hqmfMeasurePeriod.setWidth(BasicDataGenerator.generateRandomString(2147483647));

        return hqmfMeasurePeriod;
    }

    /**
     * Data pool factory for HqmfPopulation.
     * @return HqmfPopulation A HqmfPopulation object
     */
    public static HqmfPopulation getHqmfPopulation() {

        HqmfPopulation hqmfPopulation =  getHqmfPopulation(
	        null);

		return hqmfPopulation;
       
    }

     /**
     * Data pool factory for HqmfPopulation.
     * @param hqmfDoc A valid HqmfDocument object
     * @return HqmfPopulation A HqmfPopulation object
     */
    public static HqmfPopulation getHqmfPopulation(HqmfDocument hqmfDoc) {
        HqmfPopulation hqmfPopulation = new HqmfPopulation();     
        hqmfPopulation.setDateCreated(BasicDataGenerator.generateDate());
        hqmfPopulation.setDateDisabled(BasicDataGenerator.generateDate());
        hqmfPopulation.setDateUpdated(BasicDataGenerator.generateDate());
		if (hqmfDoc != null) {
			hqmfDoc.addHqmfPopulation (hqmfPopulation);
		}
        hqmfPopulation.setHqmfId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfPopulation.setHqmfPopulationId(BasicDataGenerator.generateRandomString(2147483647));
        hqmfPopulation.setPopulationJson(BasicDataGenerator.generateRandomString(2147483647));
        hqmfPopulation.setPopulationType(BasicDataGenerator.generateRandomString(2147483647));
        hqmfPopulation.setTitle(BasicDataGenerator.generateRandomString(2147483647));
        hqmfPopulation.setUserCreated(BasicDataGenerator.generateRandomInt());
        hqmfPopulation.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return hqmfPopulation;
    }

    /**
     * Data pool factory for HqmfPopulationSet.
     * @return HqmfPopulationSet A HqmfPopulationSet object
     */
    public static HqmfPopulationSet getHqmfPopulationSet() {

        HqmfPopulationSet hqmfPopulationSet =  getHqmfPopulationSet(
	        null);

		return hqmfPopulationSet;
       
    }

     /**
     * Data pool factory for HqmfPopulationSet.
     * @param hqmfDocument A valid HqmfDocument object
     * @return HqmfPopulationSet A HqmfPopulationSet object
     */
    public static HqmfPopulationSet getHqmfPopulationSet(HqmfDocument hqmfDocument) {
        HqmfPopulationSet hqmfPopulationSet = new HqmfPopulationSet();     
        hqmfPopulationSet.setDateCreated(BasicDataGenerator.generateDate());
        hqmfPopulationSet.setDateDisabled(BasicDataGenerator.generateDate());
        hqmfPopulationSet.setDateUpdated(BasicDataGenerator.generateDate());
		if (hqmfDocument != null) {
			hqmfDocument.addHqmfPopulationSet (hqmfPopulationSet);
		}
        hqmfPopulationSet.setIndex(BasicDataGenerator.generateRandomInt());
        hqmfPopulationSet.setKey(BasicDataGenerator.generateRandomString(2147483647));
        hqmfPopulationSet.setUserCreated(BasicDataGenerator.generateRandomInt());
        hqmfPopulationSet.setUserUpdated(BasicDataGenerator.generateRandomInt());
        hqmfPopulationSet.setValue(BasicDataGenerator.generateRandomString(2147483647));

        return hqmfPopulationSet;
    }

    /**
     * Data pool factory for Organization.
     * @return Organization A Organization object
     */
    public static Organization getOrganization() {

        Organization organization =  getOrganization(
	        null);

		return organization;
       
    }

     /**
     * Data pool factory for Organization.
     * @param type A valid OrganizationType object
     * @return Organization A Organization object
     */
    public static Organization getOrganization(OrganizationType type) {
        Organization organization = new Organization();     
        organization.setAddress2(BasicDataGenerator.generateRandomString(2147483647));
        organization.setAddress1(BasicDataGenerator.generateRandomString(2147483647));
        organization.setCity(BasicDataGenerator.generateRandomString(2147483647));
        organization.setDateCreated(BasicDataGenerator.generateDate());
        organization.setDateDisabled(BasicDataGenerator.generateDate());
        organization.setDateUpdated(BasicDataGenerator.generateDate());
        organization.setOrganizationName(BasicDataGenerator.generateRandomString(2147483647));
        organization.setOrganizationNumber(BasicDataGenerator.generateRandomString(2147483647));
        organization.setStateName(BasicDataGenerator.generateRandomString(2147483647));
		if (type != null) {
			type.addOrganization (organization);
		}
        organization.setUserCreated(BasicDataGenerator.generateRandomInt());
        organization.setUserUpdated(BasicDataGenerator.generateRandomInt());
        organization.setZipcode(BasicDataGenerator.generateRandomString(2147483647));

        return organization;
    }

    /**
     * Data pool factory for OrganizationType.
     * @return OrganizationTypeA OrganizationType object
     */
    public static OrganizationType getOrganizationType() {

        OrganizationType organizationType = new OrganizationType();    
        
        organizationType.setDateCreated(BasicDataGenerator.generateDate());
        organizationType.setDateDisabled(BasicDataGenerator.generateDate());
        organizationType.setDateUpdated(BasicDataGenerator.generateDate());
        organizationType.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        organizationType.setName(BasicDataGenerator.generateRandomString(2147483647));
        organizationType.setUserCreated(BasicDataGenerator.generateRandomInt());
        organizationType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return organizationType;
    }

    /**
     * Data pool factory for ParseStatusType.
     * @return ParseStatusTypeA ParseStatusType object
     */
    public static ParseStatusType getParseStatusType() {

        ParseStatusType parseStatusType = new ParseStatusType();    
        
        parseStatusType.setDateCreated(BasicDataGenerator.generateDate());
        parseStatusType.setDateDisabled(BasicDataGenerator.generateDate());
        parseStatusType.setDateUpdated(BasicDataGenerator.generateDate());
        parseStatusType.setStatusDescription(BasicDataGenerator.generateRandomString(2147483647));
        parseStatusType.setStatusName(BasicDataGenerator.generateRandomString(2147483647));
        parseStatusType.setUserCreated(BasicDataGenerator.generateRandomInt());
        parseStatusType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return parseStatusType;
    }

    /**
     * Data pool factory for PatientAdvancedDirective.
     * @return PatientAdvancedDirective A PatientAdvancedDirective object
     */
    public static PatientAdvancedDirective getPatientAdvancedDirective() {

        PatientAdvancedDirective patientAdvancedDirective =  getPatientAdvancedDirective(
	        null, null, null, null, null);

		return patientAdvancedDirective;
       
    }

     /**
     * Data pool factory for PatientAdvancedDirective.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param template A valid TemplateRoot object
     * @return PatientAdvancedDirective A PatientAdvancedDirective object
     */
    public static PatientAdvancedDirective getPatientAdvancedDirective(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, TemplateRoot template) {
        PatientAdvancedDirective patientAdvancedDirective = new PatientAdvancedDirective();     
		if (code != null) {
			code.addPatientAdvancedDirective (patientAdvancedDirective);
		}
        patientAdvancedDirective.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientAdvancedDirective (patientAdvancedDirective);
		}
        patientAdvancedDirective.setDateCreated(BasicDataGenerator.generateDate());
        patientAdvancedDirective.setDateDisabled(BasicDataGenerator.generateDate());
        patientAdvancedDirective.setDateUpdated(BasicDataGenerator.generateDate());
        patientAdvancedDirective.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientAdvancedDirective.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientAdvancedDirective.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientAdvancedDirective (patientAdvancedDirective);
		}
		if (patient != null) {
			patient.addPatientAdvancedDirective (patientAdvancedDirective);
		}
		if (template != null) {
			template.addPatientAdvancedDirective (patientAdvancedDirective);
		}
        patientAdvancedDirective.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientAdvancedDirective.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientAdvancedDirective;
    }

    /**
     * Data pool factory for PatientAllergy.
     * @return PatientAllergy A PatientAllergy object
     */
    public static PatientAllergy getPatientAllergy() {

        PatientAllergy patientAllergy =  getPatientAllergy(
	        null, null, null, null, null, null, null, null);

		return patientAllergy;
       
    }

     /**
     * Data pool factory for PatientAllergy.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param reactionCode A valid Code object
     * @param severityCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientAllergy A PatientAllergy object
     */
    public static PatientAllergy getPatientAllergy(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, Code reactionCode, Code severityCode, StatusCode statusCode, TemplateRoot template) {
        PatientAllergy patientAllergy = new PatientAllergy();     
		if (code != null) {
			code.addPatientAllergy (patientAllergy);
		}
        patientAllergy.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientAllergy (patientAllergy);
		}
        patientAllergy.setDateCreated(BasicDataGenerator.generateDate());
        patientAllergy.setDateDisabled(BasicDataGenerator.generateDate());
        patientAllergy.setDateUpdated(BasicDataGenerator.generateDate());
        patientAllergy.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientAllergy.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientAllergy.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientAllergy (patientAllergy);
		}
		if (patient != null) {
			patient.addPatientAllergy (patientAllergy);
		}
        patientAllergy.setReactionCode(reactionCode);
        patientAllergy.setReactionCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientAllergy.setSeverityCode(severityCode);
        patientAllergy.setSeverityCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientAllergy (patientAllergy);
		}
        patientAllergy.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
        patientAllergy.setSubstanceCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientAllergy.setSubstanceCodeId(BasicDataGenerator.generateRandomInt());
		if (template != null) {
			template.addPatientAllergy (patientAllergy);
		}
        patientAllergy.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientAllergy.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientAllergy;
    }

    /**
     * Data pool factory for PatientEncounter.
     * @return PatientEncounter A PatientEncounter object
     */
    public static PatientEncounter getPatientEncounter() {

        PatientEncounter patientEncounter =  getPatientEncounter(
	        null, null, null, null, null, null, null, null);

		return patientEncounter;
       
    }

     /**
     * Data pool factory for PatientEncounter.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param facilityLocationCode A valid Code object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param provider A valid Provider object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientEncounter A PatientEncounter object
     */
    public static PatientEncounter getPatientEncounter(Code code, CodeMapping codeMapping, Code facilityLocationCode, PatientNegationDetail negationDetail, PatientInfo patient, Provider provider, StatusCode statusCode, TemplateRoot template) {
        PatientEncounter patientEncounter = new PatientEncounter();     
		if (code != null) {
			code.addPatientEncounter (patientEncounter);
		}
        patientEncounter.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientEncounter (patientEncounter);
		}
        patientEncounter.setDateCreated(BasicDataGenerator.generateDate());
        patientEncounter.setDateDisabled(BasicDataGenerator.generateDate());
        patientEncounter.setDateUpdated(BasicDataGenerator.generateDate());
        patientEncounter.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientEncounter.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientEncounter.setEncounterLocation(BasicDataGenerator.generateRandomString(2147483647));
        patientEncounter.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
        patientEncounter.setFacilityLocationCode(facilityLocationCode);
        patientEncounter.setFacilityLocationCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientEncounter (patientEncounter);
		}
		if (patient != null) {
			patient.addPatientEncounter (patientEncounter);
		}
        patientEncounter.setPerformer(BasicDataGenerator.generateRandomString(2147483647));
		if (provider != null) {
			provider.addPatientEncounter (patientEncounter);
		}
		if (statusCode != null) {
			statusCode.addPatientEncounter (patientEncounter);
		}
		if (template != null) {
			template.addPatientEncounter (patientEncounter);
		}
        patientEncounter.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientEncounter.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientEncounter;
    }

    /**
     * Data pool factory for PatientEncounterDiagnosis.
     * @return PatientEncounterDiagnosis A PatientEncounterDiagnosis object
     */
    public static PatientEncounterDiagnosis getPatientEncounterDiagnosis() {

        PatientEncounterDiagnosis patientEncounterDiagnosis =  getPatientEncounterDiagnosis(
	        null, null, null, null);

		return patientEncounterDiagnosis;
       
    }

     /**
     * Data pool factory for PatientEncounterDiagnosis.
     * @param encounter A valid PatientEncounter object
     * @param problemCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientEncounterDiagnosis A PatientEncounterDiagnosis object
     */
    public static PatientEncounterDiagnosis getPatientEncounterDiagnosis(PatientEncounter encounter, Code problemCode, StatusCode statusCode, TemplateRoot template) {
        PatientEncounterDiagnosis patientEncounterDiagnosis = new PatientEncounterDiagnosis();     
        patientEncounterDiagnosis.setDateCreated(BasicDataGenerator.generateDate());
        patientEncounterDiagnosis.setDateDisabled(BasicDataGenerator.generateDate());
        patientEncounterDiagnosis.setDateUpdated(BasicDataGenerator.generateDate());
        patientEncounterDiagnosis.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientEncounterDiagnosis.setEffectiveTimeStart(BasicDataGenerator.generateDate());
		if (encounter != null) {
			encounter.addPatientEncounterDiagnosis (patientEncounterDiagnosis);
		}
        patientEncounterDiagnosis.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (problemCode != null) {
			problemCode.addPatientEncounterDiagnosis (patientEncounterDiagnosis);
		}
        patientEncounterDiagnosis.setProblemCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientEncounterDiagnosis (patientEncounterDiagnosis);
		}
        patientEncounterDiagnosis.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientEncounterDiagnosis (patientEncounterDiagnosis);
		}
        patientEncounterDiagnosis.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientEncounterDiagnosis.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientEncounterDiagnosis;
    }

    /**
     * Data pool factory for PatientFamilyHistory.
     * @return PatientFamilyHistory A PatientFamilyHistory object
     */
    public static PatientFamilyHistory getPatientFamilyHistory() {

        PatientFamilyHistory patientFamilyHistory =  getPatientFamilyHistory(
	        null, null, null, null, null, null);

		return patientFamilyHistory;
       
    }

     /**
     * Data pool factory for PatientFamilyHistory.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param diagnosisCode A valid Code object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param template A valid TemplateRoot object
     * @return PatientFamilyHistory A PatientFamilyHistory object
     */
    public static PatientFamilyHistory getPatientFamilyHistory(Code code, CodeMapping codeMapping, Code diagnosisCode, PatientNegationDetail negationDetail, PatientInfo patient, TemplateRoot template) {
        PatientFamilyHistory patientFamilyHistory = new PatientFamilyHistory();     
        patientFamilyHistory.setAgeAtOnset(BasicDataGenerator.generateRandomInt());
		if (code != null) {
			code.addPatientFamilyHistory (patientFamilyHistory);
		}
        patientFamilyHistory.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientFamilyHistory (patientFamilyHistory);
		}
        patientFamilyHistory.setDateCreated(BasicDataGenerator.generateDate());
        patientFamilyHistory.setDateDisabled(BasicDataGenerator.generateDate());
        patientFamilyHistory.setDateUpdated(BasicDataGenerator.generateDate());
        patientFamilyHistory.setDiagnosisCode(diagnosisCode);
        patientFamilyHistory.setDiagnosisCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientFamilyHistory.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientFamilyHistory.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientFamilyHistory.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientFamilyHistory (patientFamilyHistory);
		}
		if (patient != null) {
			patient.addPatientFamilyHistory (patientFamilyHistory);
		}
		if (template != null) {
			template.addPatientFamilyHistory (patientFamilyHistory);
		}
        patientFamilyHistory.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientFamilyHistory.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientFamilyHistory;
    }

    /**
     * Data pool factory for PatientFuncCogStatus.
     * @return PatientFuncCogStatus A PatientFuncCogStatus object
     */
    public static PatientFuncCogStatus getPatientFuncCogStatus() {

        PatientFuncCogStatus patientFuncCogStatus =  getPatientFuncCogStatus(
	        null, null, null, null, null, null, null);

		return patientFuncCogStatus;
       
    }

     /**
     * Data pool factory for PatientFuncCogStatus.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @param valueCode A valid Code object
     * @return PatientFuncCogStatus A PatientFuncCogStatus object
     */
    public static PatientFuncCogStatus getPatientFuncCogStatus(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, StatusCode statusCode, TemplateRoot template, Code valueCode) {
        PatientFuncCogStatus patientFuncCogStatus = new PatientFuncCogStatus();     
		if (code != null) {
			code.addPatientFuncCogStatus (patientFuncCogStatus);
		}
        patientFuncCogStatus.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientFuncCogStatus (patientFuncCogStatus);
		}
        patientFuncCogStatus.setDateCreated(BasicDataGenerator.generateDate());
        patientFuncCogStatus.setDateDisabled(BasicDataGenerator.generateDate());
        patientFuncCogStatus.setDateUpdated(BasicDataGenerator.generateDate());
        patientFuncCogStatus.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientFuncCogStatus.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientFuncCogStatus.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientFuncCogStatus (patientFuncCogStatus);
		}
		if (patient != null) {
			patient.addPatientFuncCogStatus (patientFuncCogStatus);
		}
		if (statusCode != null) {
			statusCode.addPatientFuncCogStatus (patientFuncCogStatus);
		}
        patientFuncCogStatus.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientFuncCogStatus (patientFuncCogStatus);
		}
        patientFuncCogStatus.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientFuncCogStatus.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientFuncCogStatus.setValueCode(valueCode);
        patientFuncCogStatus.setValueCodeDescription(BasicDataGenerator.generateRandomString(2147483647));

        return patientFuncCogStatus;
    }

    /**
     * Data pool factory for PatientImmunization.
     * @return PatientImmunization A PatientImmunization object
     */
    public static PatientImmunization getPatientImmunization() {

        PatientImmunization patientImmunization =  getPatientImmunization(
	        null, null, null, null, null, null);

		return patientImmunization;
       
    }

     /**
     * Data pool factory for PatientImmunization.
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param productCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientImmunization A PatientImmunization object
     */
    public static PatientImmunization getPatientImmunization(CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, Code productCode, StatusCode statusCode, TemplateRoot template) {
        PatientImmunization patientImmunization = new PatientImmunization();     
		if (codeMapping != null) {
			codeMapping.addPatientImmunization (patientImmunization);
		}
        patientImmunization.setDateCreated(BasicDataGenerator.generateDate());
        patientImmunization.setDateDisabled(BasicDataGenerator.generateDate());
        patientImmunization.setDateUpdated(BasicDataGenerator.generateDate());
        patientImmunization.setDoseQuantityUnit(BasicDataGenerator.generateRandomString(2147483647));
        patientImmunization.setDoseQuantityValue(BasicDataGenerator.generateRandomString(2147483647));
        patientImmunization.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientImmunization.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientImmunization.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientImmunization (patientImmunization);
		}
		if (patient != null) {
			patient.addPatientImmunization (patientImmunization);
		}
		if (productCode != null) {
			productCode.addPatientImmunization (patientImmunization);
		}
        patientImmunization.setProductCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientImmunization (patientImmunization);
		}
        patientImmunization.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientImmunization (patientImmunization);
		}
        patientImmunization.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientImmunization.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientImmunization;
    }

    /**
     * Data pool factory for PatientInfo.
     * @return PatientInfo A PatientInfo object
     */
    public static PatientInfo getPatientInfo() {

        PatientInfo patientInfo =  getPatientInfo(
	        null, null, null, null);

		return patientInfo;
       
    }

     /**
     * Data pool factory for PatientInfo.
     * @param ethnicityCode A valid Code object
     * @param genderCode A valid Code object
     * @param group A valid PracticeGroup object
     * @param raceCode A valid Code object
     * @return PatientInfo A PatientInfo object
     */
    public static PatientInfo getPatientInfo(Code ethnicityCode, Code genderCode, PracticeGroup group, Code raceCode) {
        PatientInfo patientInfo = new PatientInfo();     
        patientInfo.setDateCreated(BasicDataGenerator.generateDate());
        patientInfo.setDateDisabled(BasicDataGenerator.generateDate());
        patientInfo.setDateUpdated(BasicDataGenerator.generateDate());
		if (ethnicityCode != null) {
			ethnicityCode.addPatientInfo (patientInfo);
		}
        patientInfo.setEthnicityCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientInfo.setExpired(BasicDataGenerator.generateRandomBoolean());
        patientInfo.setGenderCode(genderCode);
        patientInfo.setGenderCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (group != null) {
			group.addPatientInfo (patientInfo);
		}
        patientInfo.setGuardian(BasicDataGenerator.generateRandomString(2147483647));
        patientInfo.setLanguageCommunication(BasicDataGenerator.generateRandomString(2147483647));
        patientInfo.setMaritalStatus(BasicDataGenerator.generateRandomString(2147483647));
        patientInfo.setRaceCode(raceCode);
        patientInfo.setRaceCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientInfo.setReligiousAffiliations(BasicDataGenerator.generateRandomString(2147483647));
        patientInfo.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientInfo.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientInfo;
    }

    /**
     * Data pool factory for PatientInfoSecure.
     * @return PatientInfoSecure A PatientInfoSecure object
     */
    public static PatientInfoSecure getPatientInfoSecure() {

        PatientInfoSecure patientInfoSecure =  getPatientInfoSecure(
	        null, null, null, null);

		return patientInfoSecure;
       
    }

     /**
     * Data pool factory for PatientInfoSecure.
     * @param ethnicityCode A valid Code object
     * @param genderCode A valid Code object
     * @param group A valid PracticeGroup object
     * @param raceCode A valid Code object
     * @return PatientInfoSecure A PatientInfoSecure object
     */
    public static PatientInfoSecure getPatientInfoSecure(Code ethnicityCode, Code genderCode, PracticeGroup group, Code raceCode) {
        PatientInfoSecure patientInfoSecure = new PatientInfoSecure();     
        patientInfoSecure.setAddress(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setAddress2(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setBirthTime(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setCity(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setCountry(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setDateCreated(BasicDataGenerator.generateDate());
        patientInfoSecure.setDateDisabled(BasicDataGenerator.generateDate());
        patientInfoSecure.setDateUpdated(BasicDataGenerator.generateDate());
        patientInfoSecure.setDeathDate(BasicDataGenerator.generateRandomBinary(2147483647));
		if (ethnicityCode != null) {
			ethnicityCode.addPatientInfo (patientInfoSecure);
		}
        patientInfoSecure.setEthnicityCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientInfoSecure.setExpired(BasicDataGenerator.generateRandomBoolean());
        patientInfoSecure.setFirstName(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setGenderCode(genderCode);
        patientInfoSecure.setGenderCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (group != null) {
			group.addPatientInfo (patientInfoSecure);
		}
        patientInfoSecure.setGuardian(BasicDataGenerator.generateRandomString(2147483647));
        patientInfoSecure.setLanguageCommunication(BasicDataGenerator.generateRandomString(2147483647));
        patientInfoSecure.setLastName(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setMaritalStatus(BasicDataGenerator.generateRandomString(2147483647));
        patientInfoSecure.setMedicalRecordNumber(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setMrnHash(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setRaceCode(raceCode);
        patientInfoSecure.setRaceCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientInfoSecure.setReligiousAffiliations(BasicDataGenerator.generateRandomString(2147483647));
        patientInfoSecure.setSsn(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setStateId(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setStateValue(BasicDataGenerator.generateRandomBinary(2147483647));
        patientInfoSecure.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientInfoSecure.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientInfoSecure.setZipcode(BasicDataGenerator.generateRandomBinary(2147483647));

        return patientInfoSecure;
    }

    /**
     * Data pool factory for PatientInstruction.
     * @return PatientInstruction A PatientInstruction object
     */
    public static PatientInstruction getPatientInstruction() {

        PatientInstruction patientInstruction =  getPatientInstruction(
	        null, null, null, null, null, null);

		return patientInstruction;
       
    }

     /**
     * Data pool factory for PatientInstruction.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param statusCode A valid PatientInstruction object
     * @param template A valid TemplateRoot object
     * @return PatientInstruction A PatientInstruction object
     */
    public static PatientInstruction getPatientInstruction(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, PatientInstruction statusCode, TemplateRoot template) {
        PatientInstruction patientInstruction = new PatientInstruction();     
		if (code != null) {
			code.addPatientInstruction (patientInstruction);
		}
        patientInstruction.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientInstruction (patientInstruction);
		}
        patientInstruction.setDateCreated(BasicDataGenerator.generateDate());
        patientInstruction.setDateDisabled(BasicDataGenerator.generateDate());
        patientInstruction.setDateUpdated(BasicDataGenerator.generateDate());
        patientInstruction.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientInstruction.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientInstruction.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientInstruction (patientInstruction);
		}
		if (patient != null) {
			patient.addPatientInstruction (patientInstruction);
		}
		if (statusCode != null) {
			statusCode.addPatientInstruction (patientInstruction);
		}
		if (template != null) {
			template.addPatientInstruction (patientInstruction);
		}
        patientInstruction.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientInstruction.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientInstruction;
    }

    /**
     * Data pool factory for PatientMedicalEquipment.
     * @return PatientMedicalEquipment A PatientMedicalEquipment object
     */
    public static PatientMedicalEquipment getPatientMedicalEquipment() {

        PatientMedicalEquipment patientMedicalEquipment =  getPatientMedicalEquipment(
	        null, null, null, null, null, null, null);

		return patientMedicalEquipment;
       
    }

     /**
     * Data pool factory for PatientMedicalEquipment.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param reasonCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientMedicalEquipment A PatientMedicalEquipment object
     */
    public static PatientMedicalEquipment getPatientMedicalEquipment(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, Code reasonCode, StatusCode statusCode, TemplateRoot template) {
        PatientMedicalEquipment patientMedicalEquipment = new PatientMedicalEquipment();     
		if (code != null) {
			code.addPatientMedicalEquipment (patientMedicalEquipment);
		}
        patientMedicalEquipment.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientMedicalEquipment (patientMedicalEquipment);
		}
        patientMedicalEquipment.setDateCreated(BasicDataGenerator.generateDate());
        patientMedicalEquipment.setDateDisabled(BasicDataGenerator.generateDate());
        patientMedicalEquipment.setDateUpdated(BasicDataGenerator.generateDate());
        patientMedicalEquipment.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientMedicalEquipment.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientMedicalEquipment.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientMedicalEquipment (patientMedicalEquipment);
		}
		if (patient != null) {
			patient.addPatientMedicalEquipment (patientMedicalEquipment);
		}
        patientMedicalEquipment.setReasonCode(reasonCode);
        patientMedicalEquipment.setReasonCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientMedicalEquipment.setReasonEffectiveTime(BasicDataGenerator.generateDate());
		if (statusCode != null) {
			statusCode.addPatientMedicalEquipment (patientMedicalEquipment);
		}
        patientMedicalEquipment.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientMedicalEquipment (patientMedicalEquipment);
		}
        patientMedicalEquipment.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientMedicalEquipment.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientMedicalEquipment;
    }

    /**
     * Data pool factory for PatientMedication.
     * @return PatientMedication A PatientMedication object
     */
    public static PatientMedication getPatientMedication() {

        PatientMedication patientMedication =  getPatientMedication(
	        null, null, null, null, null, null, null, null);

		return patientMedication;
       
    }

     /**
     * Data pool factory for PatientMedication.
     * @param administrationCode A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param productCode A valid Code object
     * @param reasonCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientMedication A PatientMedication object
     */
    public static PatientMedication getPatientMedication(Code administrationCode, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, Code productCode, Code reasonCode, StatusCode statusCode, TemplateRoot template) {
        PatientMedication patientMedication = new PatientMedication();     
		if (administrationCode != null) {
			administrationCode.addPatientMedication (patientMedication);
		}
        patientMedication.setAdministrationCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientMedication (patientMedication);
		}
        patientMedication.setDateCreated(BasicDataGenerator.generateDate());
        patientMedication.setDateDisabled(BasicDataGenerator.generateDate());
        patientMedication.setDateUpdated(BasicDataGenerator.generateDate());
        patientMedication.setDoseQuantityUnit(BasicDataGenerator.generateRandomString(2147483647));
        patientMedication.setDoseQuantityValue(BasicDataGenerator.generateRandomString(2147483647));
        patientMedication.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientMedication.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientMedication.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientMedication (patientMedication);
		}
		if (patient != null) {
			patient.addPatientMedication (patientMedication);
		}
        patientMedication.setProductCode(productCode);
        patientMedication.setProductCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientMedication.setRateQuantityUnit(BasicDataGenerator.generateRandomString(2147483647));
        patientMedication.setRateQuantityValue(BasicDataGenerator.generateRandomString(2147483647));
        patientMedication.setReasonCode(reasonCode);
        patientMedication.setReasonCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientMedication.setReasonEffectiveTime(BasicDataGenerator.generateDate());
		if (statusCode != null) {
			statusCode.addPatientMedication (patientMedication);
		}
        patientMedication.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientMedication (patientMedication);
		}
        patientMedication.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientMedication.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientMedication;
    }

    /**
     * Data pool factory for PatientNegationDetail.
     * @return PatientNegationDetail A PatientNegationDetail object
     */
    public static PatientNegationDetail getPatientNegationDetail() {

        PatientNegationDetail patientNegationDetail =  getPatientNegationDetail(
	        null);

		return patientNegationDetail;
       
    }

     /**
     * Data pool factory for PatientNegationDetail.
     * @param code A valid Code object
     * @return PatientNegationDetail A PatientNegationDetail object
     */
    public static PatientNegationDetail getPatientNegationDetail(Code code) {
        PatientNegationDetail patientNegationDetail = new PatientNegationDetail();     
		if (code != null) {
			code.addPatientNegationDetail (patientNegationDetail);
		}
        patientNegationDetail.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientNegationDetail.setDateCreated(BasicDataGenerator.generateDate());
        patientNegationDetail.setDateDisabled(BasicDataGenerator.generateDate());
        patientNegationDetail.setDateUpdated(BasicDataGenerator.generateDate());
        patientNegationDetail.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientNegationDetail.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientNegationDetail.setValue(BasicDataGenerator.generateRandomString(2147483647));

        return patientNegationDetail;
    }

    /**
     * Data pool factory for PatientPayer.
     * @return PatientPayer A PatientPayer object
     */
    public static PatientPayer getPatientPayer() {

        PatientPayer patientPayer =  getPatientPayer(
	        null, null, null, null, null, null);

		return patientPayer;
       
    }

     /**
     * Data pool factory for PatientPayer.
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param payerCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientPayer A PatientPayer object
     */
    public static PatientPayer getPatientPayer(CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, Code payerCode, StatusCode statusCode, TemplateRoot template) {
        PatientPayer patientPayer = new PatientPayer();     
		if (codeMapping != null) {
			codeMapping.addPatientPayer (patientPayer);
		}
        patientPayer.setDateCreated(BasicDataGenerator.generateDate());
        patientPayer.setDateDisabled(BasicDataGenerator.generateDate());
        patientPayer.setDateUpdated(BasicDataGenerator.generateDate());
		if (negationDetail != null) {
			negationDetail.addPatientPayer (patientPayer);
		}
		if (patient != null) {
			patient.addPatientPayer (patientPayer);
		}
		if (payerCode != null) {
			payerCode.addPatientPayer (patientPayer);
		}
        patientPayer.setPayerCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientPayer (patientPayer);
		}
		if (template != null) {
			template.addPatientPayer (patientPayer);
		}
        patientPayer.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientPayer.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientPayer;
    }

    /**
     * Data pool factory for PatientPhoneNumber.
     * @return PatientPhoneNumber A PatientPhoneNumber object
     */
    public static PatientPhoneNumber getPatientPhoneNumber() {

        PatientPhoneNumber patientPhoneNumber =  getPatientPhoneNumber(
	        null);

		return patientPhoneNumber;
       
    }

     /**
     * Data pool factory for PatientPhoneNumber.
     * @param patient A valid PatientInfo object
     * @return PatientPhoneNumber A PatientPhoneNumber object
     */
    public static PatientPhoneNumber getPatientPhoneNumber(PatientInfo patient) {
        PatientPhoneNumber patientPhoneNumber = new PatientPhoneNumber();     
        patientPhoneNumber.setDateCreated(BasicDataGenerator.generateDate());
        patientPhoneNumber.setDateDisabled(BasicDataGenerator.generateDate());
        patientPhoneNumber.setDateUpdated(BasicDataGenerator.generateDate());
		if (patient != null) {
			patient.addPatientPhoneNumber (patientPhoneNumber);
		}
        patientPhoneNumber.setPhoneNumberType(BasicDataGenerator.generateRandomString(2147483647));
        patientPhoneNumber.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientPhoneNumber.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientPhoneNumber;
    }

    /**
     * Data pool factory for PatientPhoneNumberSecure.
     * @return PatientPhoneNumberSecure A PatientPhoneNumberSecure object
     */
    public static PatientPhoneNumberSecure getPatientPhoneNumberSecure() {

        PatientPhoneNumberSecure patientPhoneNumberSecure =  getPatientPhoneNumberSecure(
	        null);

		return patientPhoneNumberSecure;
       
    }

     /**
     * Data pool factory for PatientPhoneNumberSecure.
     * @param patient A valid PatientInfo object
     * @return PatientPhoneNumberSecure A PatientPhoneNumberSecure object
     */
    public static PatientPhoneNumberSecure getPatientPhoneNumberSecure(PatientInfo patient) {
        PatientPhoneNumberSecure patientPhoneNumberSecure = new PatientPhoneNumberSecure();     
        patientPhoneNumberSecure.setDateCreated(BasicDataGenerator.generateDate());
        patientPhoneNumberSecure.setDateDisabled(BasicDataGenerator.generateDate());
        patientPhoneNumberSecure.setDateUpdated(BasicDataGenerator.generateDate());
		if (patient != null) {
			patient.addPatientPhoneNumber (patientPhoneNumberSecure);
		}
        patientPhoneNumberSecure.setPhoneNumber(BasicDataGenerator.generateRandomBinary(2147483647));
        patientPhoneNumberSecure.setPhoneNumberType(BasicDataGenerator.generateRandomString(2147483647));
        patientPhoneNumberSecure.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientPhoneNumberSecure.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientPhoneNumberSecure;
    }

    /**
     * Data pool factory for PatientPlanOfCare.
     * @return PatientPlanOfCare A PatientPlanOfCare object
     */
    public static PatientPlanOfCare getPatientPlanOfCare() {

        PatientPlanOfCare patientPlanOfCare =  getPatientPlanOfCare(
	        null, null, null, null, null, null);

		return patientPlanOfCare;
       
    }

     /**
     * Data pool factory for PatientPlanOfCare.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientPlanOfCare A PatientPlanOfCare object
     */
    public static PatientPlanOfCare getPatientPlanOfCare(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, StatusCode statusCode, TemplateRoot template) {
        PatientPlanOfCare patientPlanOfCare = new PatientPlanOfCare();     
		if (code != null) {
			code.addPatientPlanOfCare (patientPlanOfCare);
		}
        patientPlanOfCare.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientPlanOfCare (patientPlanOfCare);
		}
        patientPlanOfCare.setDateCreated(BasicDataGenerator.generateDate());
        patientPlanOfCare.setDateDisabled(BasicDataGenerator.generateDate());
        patientPlanOfCare.setDateUpdated(BasicDataGenerator.generateDate());
        patientPlanOfCare.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientPlanOfCare.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientPlanOfCare.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientPlanOfCare (patientPlanOfCare);
		}
		if (patient != null) {
			patient.addPatientPlanOfCare (patientPlanOfCare);
		}
		if (statusCode != null) {
			statusCode.addPatientPlanOfCare (patientPlanOfCare);
		}
        patientPlanOfCare.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientPlanOfCare (patientPlanOfCare);
		}
        patientPlanOfCare.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientPlanOfCare.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientPlanOfCare;
    }

    /**
     * Data pool factory for PatientProblem.
     * @return PatientProblem A PatientProblem object
     */
    public static PatientProblem getPatientProblem() {

        PatientProblem patientProblem =  getPatientProblem(
	        null, null, null, null, null, null, null, null, null, null, null);

		return patientProblem;
       
    }

     /**
     * Data pool factory for PatientProblem.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param connectedRecord A valid PatientProblem object
     * @param lateralityCode A valid Code object
     * @param negationDetail A valid PatientNegationDetail object
     * @param ordinalityCode A valid Code object
     * @param patient A valid PatientInfo object
     * @param problemCode A valid Code object
     * @param severityCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @return PatientProblem A PatientProblem object
     */
    public static PatientProblem getPatientProblem(Code code, CodeMapping codeMapping, PatientProblem connectedRecord, Code lateralityCode, PatientNegationDetail negationDetail, Code ordinalityCode, PatientInfo patient, Code problemCode, Code severityCode, StatusCode statusCode, TemplateRoot template) {
        PatientProblem patientProblem = new PatientProblem();     
		if (code != null) {
			code.addPatientProblem (patientProblem);
		}
        patientProblem.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientProblem (patientProblem);
		}
		if (connectedRecord != null) {
			connectedRecord.addPatientProblem (patientProblem);
		}
        patientProblem.setDateCreated(BasicDataGenerator.generateDate());
        patientProblem.setDateDisabled(BasicDataGenerator.generateDate());
        patientProblem.setDateUpdated(BasicDataGenerator.generateDate());
        patientProblem.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientProblem.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientProblem.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
        patientProblem.setLateralityCode(lateralityCode);
        patientProblem.setLateralityCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientProblem (patientProblem);
		}
        patientProblem.setOrdinalityCode(ordinalityCode);
        patientProblem.setOrdinalityCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (patient != null) {
			patient.addPatientProblem (patientProblem);
		}
        patientProblem.setProblemCode(problemCode);
        patientProblem.setProblemCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientProblem.setSeverityCode(severityCode);
        patientProblem.setSeverityCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientProblem (patientProblem);
		}
        patientProblem.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientProblem (patientProblem);
		}
        patientProblem.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientProblem.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientProblem;
    }

    /**
     * Data pool factory for PatientProcedure.
     * @return PatientProcedure A PatientProcedure object
     */
    public static PatientProcedure getPatientProcedure() {

        PatientProcedure patientProcedure =  getPatientProcedure(
	        null, null, null, null, null, null, null, null, null, null, null);

		return patientProcedure;
       
    }

     /**
     * Data pool factory for PatientProcedure.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param connectedRecord A valid PatientProcedure object
     * @param negationDetail A valid PatientNegationDetail object
     * @param ordinalityCode A valid Code object
     * @param patient A valid PatientInfo object
     * @param reasonCode A valid Code object
     * @param resultValueCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @param valueCode A valid Code object
     * @return PatientProcedure A PatientProcedure object
     */
    public static PatientProcedure getPatientProcedure(Code code, CodeMapping codeMapping, PatientProcedure connectedRecord, PatientNegationDetail negationDetail, Code ordinalityCode, PatientInfo patient, Code reasonCode, Code resultValueCode, StatusCode statusCode, TemplateRoot template, Code valueCode) {
        PatientProcedure patientProcedure = new PatientProcedure();     
		if (code != null) {
			code.addPatientProcedure (patientProcedure);
		}
        patientProcedure.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientProcedure (patientProcedure);
		}
		if (connectedRecord != null) {
			connectedRecord.addPatientProcedure (patientProcedure);
		}
        patientProcedure.setDateCreated(BasicDataGenerator.generateDate());
        patientProcedure.setDateDisabled(BasicDataGenerator.generateDate());
        patientProcedure.setDateUpdated(BasicDataGenerator.generateDate());
        patientProcedure.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientProcedure.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientProcedure.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientProcedure (patientProcedure);
		}
        patientProcedure.setOrdinalityCode(ordinalityCode);
        patientProcedure.setOrdinalityCodeDescription(BasicDataGenerator.generateRandomInt());
        patientProcedure.setOrdinalityCodeName(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setOrdinalityCodeSystem(BasicDataGenerator.generateRandomString(2147483647));
		if (patient != null) {
			patient.addPatientProcedure (patientProcedure);
		}
        patientProcedure.setReasonCode(reasonCode);
        patientProcedure.setReasonCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setReasonCodeName(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setReasonCodeSystem(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setReasonEffectiveTime(BasicDataGenerator.generateDate());
        patientProcedure.setResultValueCode(resultValueCode);
        patientProcedure.setResultValueCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setResultValueCodeName(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setResultValueCodeSystem(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientProcedure (patientProcedure);
		}
        patientProcedure.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientProcedure (patientProcedure);
		}
        patientProcedure.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientProcedure.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientProcedure.setValueCode(valueCode);
        patientProcedure.setValueCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setValueString(BasicDataGenerator.generateRandomString(2147483647));
        patientProcedure.setValueUnit(BasicDataGenerator.generateRandomString(2147483647));

        return patientProcedure;
    }

    /**
     * Data pool factory for PatientReasonForReferral.
     * @return PatientReasonForReferral A PatientReasonForReferral object
     */
    public static PatientReasonForReferral getPatientReasonForReferral() {

        PatientReasonForReferral patientReasonForReferral =  getPatientReasonForReferral(
	        null, null, null, null, null);

		return patientReasonForReferral;
       
    }

     /**
     * Data pool factory for PatientReasonForReferral.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param template A valid TemplateRoot object
     * @return PatientReasonForReferral A PatientReasonForReferral object
     */
    public static PatientReasonForReferral getPatientReasonForReferral(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, TemplateRoot template) {
        PatientReasonForReferral patientReasonForReferral = new PatientReasonForReferral();     
		if (code != null) {
			code.addPatientReasonForReferral (patientReasonForReferral);
		}
        patientReasonForReferral.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientReasonForReferral (patientReasonForReferral);
		}
        patientReasonForReferral.setDateCreated(BasicDataGenerator.generateDate());
        patientReasonForReferral.setDateDisabled(BasicDataGenerator.generateDate());
        patientReasonForReferral.setDateUpdated(BasicDataGenerator.generateDate());
        patientReasonForReferral.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientReasonForReferral.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientReasonForReferral.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientReasonForReferral (patientReasonForReferral);
		}
		if (patient != null) {
			patient.addPatientReasonForReferral (patientReasonForReferral);
		}
		if (template != null) {
			template.addPatientReasonForReferral (patientReasonForReferral);
		}
        patientReasonForReferral.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientReasonForReferral.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientReasonForReferral;
    }

    /**
     * Data pool factory for PatientReasonForVisit.
     * @return PatientReasonForVisit A PatientReasonForVisit object
     */
    public static PatientReasonForVisit getPatientReasonForVisit() {

        PatientReasonForVisit patientReasonForVisit =  getPatientReasonForVisit(
	        null, null, null, null, null);

		return patientReasonForVisit;
       
    }

     /**
     * Data pool factory for PatientReasonForVisit.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param template A valid TemplateRoot object
     * @return PatientReasonForVisit A PatientReasonForVisit object
     */
    public static PatientReasonForVisit getPatientReasonForVisit(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, TemplateRoot template) {
        PatientReasonForVisit patientReasonForVisit = new PatientReasonForVisit();     
		if (code != null) {
			code.addPatientReasonForVisit (patientReasonForVisit);
		}
        patientReasonForVisit.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientReasonForVisit (patientReasonForVisit);
		}
        patientReasonForVisit.setDateCreated(BasicDataGenerator.generateDate());
        patientReasonForVisit.setDateDisabled(BasicDataGenerator.generateDate());
        patientReasonForVisit.setDateUpdated(BasicDataGenerator.generateDate());
        patientReasonForVisit.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientReasonForVisit.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientReasonForVisit.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientReasonForVisit (patientReasonForVisit);
		}
		if (patient != null) {
			patient.addPatientReasonForVisit (patientReasonForVisit);
		}
		if (template != null) {
			template.addPatientReasonForVisit (patientReasonForVisit);
		}
        patientReasonForVisit.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientReasonForVisit.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return patientReasonForVisit;
    }

    /**
     * Data pool factory for PatientResult.
     * @return PatientResult A PatientResult object
     */
    public static PatientResult getPatientResult() {

        PatientResult patientResult =  getPatientResult(
	        null, null, null, null, null, null, null, null, null);

		return patientResult;
       
    }

     /**
     * Data pool factory for PatientResult.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param connectedRecord A valid PatientResult object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param reasonCode A valid Code object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @param valueCode A valid Code object
     * @return PatientResult A PatientResult object
     */
    public static PatientResult getPatientResult(Code code, CodeMapping codeMapping, PatientResult connectedRecord, PatientNegationDetail negationDetail, PatientInfo patient, Code reasonCode, StatusCode statusCode, TemplateRoot template, Code valueCode) {
        PatientResult patientResult = new PatientResult();     
		if (code != null) {
			code.addPatientResult (patientResult);
		}
        patientResult.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientResult (patientResult);
		}
		if (connectedRecord != null) {
			connectedRecord.addPatientResult (patientResult);
		}
        patientResult.setDateCreated(BasicDataGenerator.generateDate());
        patientResult.setDateDisabled(BasicDataGenerator.generateDate());
        patientResult.setDateUpdated(BasicDataGenerator.generateDate());
        patientResult.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientResult.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientResult.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientResult (patientResult);
		}
		if (patient != null) {
			patient.addPatientResult (patientResult);
		}
        patientResult.setReasonCode(reasonCode);
        patientResult.setReasonCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        patientResult.setReasonEffectiveTime(BasicDataGenerator.generateDate());
        patientResult.setReferenceRangeHighValue(BasicDataGenerator.generateRandomString(2147483647));
        patientResult.setReferenceRangeHighValueUnit(BasicDataGenerator.generateRandomString(2147483647));
        patientResult.setReferenceRangeLowValue(BasicDataGenerator.generateRandomString(2147483647));
        patientResult.setReferenceRangeLowValueUnit(BasicDataGenerator.generateRandomString(2147483647));
        patientResult.setResultValue(BasicDataGenerator.generateRandomString(2147483647));
        patientResult.setResultValueUnit(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientResult (patientResult);
		}
        patientResult.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientResult (patientResult);
		}
        patientResult.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientResult.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientResult.setValueCode(valueCode);
        patientResult.setValueCodeDescription(BasicDataGenerator.generateRandomString(2147483647));

        return patientResult;
    }

    /**
     * Data pool factory for PatientSocialHistory.
     * @return PatientSocialHistory A PatientSocialHistory object
     */
    public static PatientSocialHistory getPatientSocialHistory() {

        PatientSocialHistory patientSocialHistory =  getPatientSocialHistory(
	        null, null, null, null, null, null, null);

		return patientSocialHistory;
       
    }

     /**
     * Data pool factory for PatientSocialHistory.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @param valueCode A valid Code object
     * @return PatientSocialHistory A PatientSocialHistory object
     */
    public static PatientSocialHistory getPatientSocialHistory(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, StatusCode statusCode, TemplateRoot template, Code valueCode) {
        PatientSocialHistory patientSocialHistory = new PatientSocialHistory();     
		if (code != null) {
			code.addPatientSocialHistory (patientSocialHistory);
		}
        patientSocialHistory.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientSocialHistory (patientSocialHistory);
		}
        patientSocialHistory.setDateCreated(BasicDataGenerator.generateDate());
        patientSocialHistory.setDateDisabled(BasicDataGenerator.generateDate());
        patientSocialHistory.setDateUpdated(BasicDataGenerator.generateDate());
        patientSocialHistory.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientSocialHistory.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientSocialHistory.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientSocialHistory (patientSocialHistory);
		}
		if (patient != null) {
			patient.addPatientSocialHistory (patientSocialHistory);
		}
		if (statusCode != null) {
			statusCode.addPatientSocialHistory (patientSocialHistory);
		}
        patientSocialHistory.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientSocialHistory (patientSocialHistory);
		}
        patientSocialHistory.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientSocialHistory.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientSocialHistory.setValueCode(valueCode);
        patientSocialHistory.setValueCodeDescription(BasicDataGenerator.generateRandomString(2147483647));

        return patientSocialHistory;
    }

    /**
     * Data pool factory for PatientVitalSign.
     * @return PatientVitalSign A PatientVitalSign object
     */
    public static PatientVitalSign getPatientVitalSign() {

        PatientVitalSign patientVitalSign =  getPatientVitalSign(
	        null, null, null, null, null, null, null);

		return patientVitalSign;
       
    }

     /**
     * Data pool factory for PatientVitalSign.
     * @param code A valid Code object
     * @param codeMapping A valid CodeMapping object
     * @param negationDetail A valid PatientNegationDetail object
     * @param patient A valid PatientInfo object
     * @param statusCode A valid StatusCode object
     * @param template A valid TemplateRoot object
     * @param valueCode A valid Code object
     * @return PatientVitalSign A PatientVitalSign object
     */
    public static PatientVitalSign getPatientVitalSign(Code code, CodeMapping codeMapping, PatientNegationDetail negationDetail, PatientInfo patient, StatusCode statusCode, TemplateRoot template, Code valueCode) {
        PatientVitalSign patientVitalSign = new PatientVitalSign();     
		if (code != null) {
			code.addPatientVitalSign (patientVitalSign);
		}
        patientVitalSign.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
		if (codeMapping != null) {
			codeMapping.addPatientVitalSign (patientVitalSign);
		}
        patientVitalSign.setDateCreated(BasicDataGenerator.generateDate());
        patientVitalSign.setDateDisabled(BasicDataGenerator.generateDate());
        patientVitalSign.setDateUpdated(BasicDataGenerator.generateDate());
        patientVitalSign.setEffectiveTimeEnd(BasicDataGenerator.generateDate());
        patientVitalSign.setEffectiveTimeStart(BasicDataGenerator.generateDate());
        patientVitalSign.setExternalId(BasicDataGenerator.generateRandomString(2147483647));
		if (negationDetail != null) {
			negationDetail.addPatientVitalSign (patientVitalSign);
		}
		if (patient != null) {
			patient.addPatientVitalSign (patientVitalSign);
		}
        patientVitalSign.setRecordValue(BasicDataGenerator.generateRandomString(2147483647));
        patientVitalSign.setRecordValueUnit(BasicDataGenerator.generateRandomString(2147483647));
		if (statusCode != null) {
			statusCode.addPatientVitalSign (patientVitalSign);
		}
        patientVitalSign.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
		if (template != null) {
			template.addPatientVitalSign (patientVitalSign);
		}
        patientVitalSign.setUserCreated(BasicDataGenerator.generateRandomInt());
        patientVitalSign.setUserUpdated(BasicDataGenerator.generateRandomInt());
        patientVitalSign.setValueCode(valueCode);
        patientVitalSign.setValueCodeDescription(BasicDataGenerator.generateRandomString(2147483647));

        return patientVitalSign;
    }

    /**
     * Data pool factory for PracticeAvailableMeasure.
     * @return PracticeAvailableMeasure A PracticeAvailableMeasure object
     */
    public static PracticeAvailableMeasure getPracticeAvailableMeasure() {

        PracticeAvailableMeasure practiceAvailableMeasure =  getPracticeAvailableMeasure(
	        null, null);

		return practiceAvailableMeasure;
       
    }

     /**
     * Data pool factory for PracticeAvailableMeasure.
     * @param bundle A valid Bundle object
     * @param group A valid PracticeGroup object
     * @return PracticeAvailableMeasure A PracticeAvailableMeasure object
     */
    public static PracticeAvailableMeasure getPracticeAvailableMeasure(Bundle bundle, PracticeGroup group) {
        PracticeAvailableMeasure practiceAvailableMeasure = new PracticeAvailableMeasure();     
		if (bundle != null) {
			bundle.addPracticeAvailableMeasure (practiceAvailableMeasure);
		}
        practiceAvailableMeasure.setCmsId(BasicDataGenerator.generateRandomString(2147483647));
        practiceAvailableMeasure.setDateCreated(BasicDataGenerator.generateDate());
        practiceAvailableMeasure.setDateDisabled(BasicDataGenerator.generateDate());
        practiceAvailableMeasure.setDateUpdated(BasicDataGenerator.generateDate());
        practiceAvailableMeasure.setEffectiveDateEnd(BasicDataGenerator.generateDate());
        practiceAvailableMeasure.setEffectiveDateStart(BasicDataGenerator.generateDate());
		if (group != null) {
			group.addPracticeAvailableMeasure (practiceAvailableMeasure);
		}
        practiceAvailableMeasure.setUserCreated(BasicDataGenerator.generateRandomInt());
        practiceAvailableMeasure.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return practiceAvailableMeasure;
    }

    /**
     * Data pool factory for PracticeGroup.
     * @return PracticeGroup A PracticeGroup object
     */
    public static PracticeGroup getPracticeGroup() {

        PracticeGroup practiceGroup =  getPracticeGroup(
	        null, null, null);

		return practiceGroup;
       
    }

     /**
     * Data pool factory for PracticeGroup.
     * @param organization A valid Organization object
     * @param type A valid PracticeGroupType object
     * @param vendor A valid EhrVendor object
     * @return PracticeGroup A PracticeGroup object
     */
    public static PracticeGroup getPracticeGroup(Organization organization, PracticeGroupType type, EhrVendor vendor) {
        PracticeGroup practiceGroup = new PracticeGroup();     
        practiceGroup.setActiveProblemsOnlyFlag(BasicDataGenerator.generateRandomBoolean());
        practiceGroup.setAddress2(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroup.setAddress1(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroup.setCity(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroup.setDateCreated(BasicDataGenerator.generateDate());
        practiceGroup.setDateDisabled(BasicDataGenerator.generateDate());
        practiceGroup.setDateUpdated(BasicDataGenerator.generateDate());
        practiceGroup.setGroupName(BasicDataGenerator.generateRandomString(2147483647));
		if (organization != null) {
			organization.addPracticeGroup (practiceGroup);
		}
        practiceGroup.setPracticeNpi(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroup.setSenderOid(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroup.setStateName(BasicDataGenerator.generateRandomString(2147483647));
		if (type != null) {
			type.addPracticeGroup (practiceGroup);
		}
        practiceGroup.setUserCreated(BasicDataGenerator.generateRandomInt());
        practiceGroup.setUserUpdated(BasicDataGenerator.generateRandomInt());
		if (vendor != null) {
			vendor.addPracticeGroup (practiceGroup);
		}
        practiceGroup.setZipcode(BasicDataGenerator.generateRandomString(2147483647));

        return practiceGroup;
    }

    /**
     * Data pool factory for PracticeGroupType.
     * @return PracticeGroupTypeA PracticeGroupType object
     */
    public static PracticeGroupType getPracticeGroupType() {

        PracticeGroupType practiceGroupType = new PracticeGroupType();    
        
        practiceGroupType.setDateCreated(BasicDataGenerator.generateDate());
        practiceGroupType.setDateDisabled(BasicDataGenerator.generateDate());
        practiceGroupType.setDateUpdated(BasicDataGenerator.generateDate());
        practiceGroupType.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroupType.setName(BasicDataGenerator.generateRandomString(2147483647));
        practiceGroupType.setUserCreated(BasicDataGenerator.generateRandomInt());
        practiceGroupType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return practiceGroupType;
    }

    /**
     * Data pool factory for Provider.
     * @return Provider A Provider object
     */
    public static Provider getProvider() {

        Provider provider =  getProvider(
	        null, null, null);

		return provider;
       
    }

     /**
     * Data pool factory for Provider.
     * @param group A valid PracticeGroup object
     * @param state A valid State object
     * @param type A valid ProviderType object
     * @return Provider A Provider object
     */
    public static Provider getProvider(PracticeGroup group, State state, ProviderType type) {
        Provider provider = new Provider();     
        provider.setAddress(BasicDataGenerator.generateRandomString(2147483647));
        provider.setAddress2(BasicDataGenerator.generateRandomString(2147483647));
        provider.setCity(BasicDataGenerator.generateRandomString(2147483647));
        provider.setCountry(BasicDataGenerator.generateRandomString(2147483647));
        provider.setDateCreated(BasicDataGenerator.generateDate());
        provider.setDateDisabled(BasicDataGenerator.generateDate());
        provider.setDateUpdated(BasicDataGenerator.generateDate());
        provider.setFirstName(BasicDataGenerator.generateRandomString(250));
        provider.setFullName(BasicDataGenerator.generateRandomString(2147483647));
		if (group != null) {
			group.addProvider (provider);
		}
        provider.setLastName(BasicDataGenerator.generateRandomString(250));
        provider.setMiddleName(BasicDataGenerator.generateRandomString(250));
        provider.setNpi(BasicDataGenerator.generateRandomString(2147483647));
        provider.setOrgName(BasicDataGenerator.generateRandomString(250));
		if (state != null) {
			state.addProvider (provider);
		}
        provider.setStateValue(BasicDataGenerator.generateRandomString(2147483647));
        provider.setTaxId(BasicDataGenerator.generateRandomString(250));
		if (type != null) {
			type.addProvider (provider);
		}
        provider.setUserCreated(BasicDataGenerator.generateRandomInt());
        provider.setUserUpdated(BasicDataGenerator.generateRandomInt());
        provider.setZipcode(BasicDataGenerator.generateRandomString(2147483647));

        return provider;
    }

    /**
     * Data pool factory for ProviderPhoneNumber.
     * @return ProviderPhoneNumber A ProviderPhoneNumber object
     */
    public static ProviderPhoneNumber getProviderPhoneNumber() {

        ProviderPhoneNumber providerPhoneNumber =  getProviderPhoneNumber(
	        null);

		return providerPhoneNumber;
       
    }

     /**
     * Data pool factory for ProviderPhoneNumber.
     * @param provider A valid Provider object
     * @return ProviderPhoneNumber A ProviderPhoneNumber object
     */
    public static ProviderPhoneNumber getProviderPhoneNumber(Provider provider) {
        ProviderPhoneNumber providerPhoneNumber = new ProviderPhoneNumber();     
        providerPhoneNumber.setDateCreated(BasicDataGenerator.generateDate());
        providerPhoneNumber.setDateDisabled(BasicDataGenerator.generateDate());
        providerPhoneNumber.setDateUpdated(BasicDataGenerator.generateDate());
        providerPhoneNumber.setPhoneNumber(BasicDataGenerator.generateRandomString(2147483647));
        providerPhoneNumber.setPhoneNumberType(BasicDataGenerator.generateRandomString(2147483647));
		if (provider != null) {
			provider.addProviderPhoneNumber (providerPhoneNumber);
		}
        providerPhoneNumber.setUserCreated(BasicDataGenerator.generateRandomInt());
        providerPhoneNumber.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return providerPhoneNumber;
    }

    /**
     * Data pool factory for ProviderType.
     * @return ProviderTypeA ProviderType object
     */
    public static ProviderType getProviderType() {

        ProviderType providerType = new ProviderType();    
        
        providerType.setDateCreated(BasicDataGenerator.generateDate());
        providerType.setDateDisabled(BasicDataGenerator.generateDate());
        providerType.setDateUpdated(BasicDataGenerator.generateDate());
        providerType.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        providerType.setMentalHealthIndicator(BasicDataGenerator.generateRandomBoolean());
        providerType.setName(BasicDataGenerator.generateRandomString(2147483647));
        providerType.setUserCreated(BasicDataGenerator.generateRandomInt());
        providerType.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return providerType;
    }

    /**
     * Data pool factory for Result.
     * @return Result A Result object
     */
    public static Result getResult() {

        Result result =  getResult(
	        null);

		return result;
       
    }

     /**
     * Data pool factory for Result.
     * @param hqmfPopulationSet A valid HqmfPopulationSet object
     * @return Result A Result object
     */
    public static Result getResult(HqmfPopulationSet hqmfPopulationSet) {
        Result result = new Result();     
        result.setDateCreated(BasicDataGenerator.generateDate());
        result.setDateDisabled(BasicDataGenerator.generateDate());
        result.setDateUpdated(BasicDataGenerator.generateDate());
		if (hqmfPopulationSet != null) {
			hqmfPopulationSet.addResult (result);
		}
        result.setResultValue(BasicDataGenerator.generateRandomInt());
        result.setUserCreated(BasicDataGenerator.generateRandomInt());
        result.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return result;
    }

    /**
     * Data pool factory for ResultPatient.
     * @return ResultPatient A ResultPatient object
     */
    public static ResultPatient getResultPatient() {

        ResultPatient resultPatient =  getResultPatient(
	        null, null);

		return resultPatient;
       
    }

     /**
     * Data pool factory for ResultPatient.
     * @param patient A valid PatientInfo object
     * @param result A valid Result object
     * @return ResultPatient A ResultPatient object
     */
    public static ResultPatient getResultPatient(PatientInfo patient, Result result) {
        ResultPatient resultPatient = new ResultPatient();     
        resultPatient.setDateCreated(BasicDataGenerator.generateDate());
        resultPatient.setDateDisabled(BasicDataGenerator.generateDate());
        resultPatient.setDateUpdated(BasicDataGenerator.generateDate());
		if (patient != null) {
			patient.addResultPatient (resultPatient);
		}
		if (result != null) {
			result.addResultPatient (resultPatient);
		}
        resultPatient.setUserCreated(BasicDataGenerator.generateRandomInt());
        resultPatient.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return resultPatient;
    }

    /**
     * Data pool factory for ResultSupplemental.
     * @return ResultSupplemental A ResultSupplemental object
     */
    public static ResultSupplemental getResultSupplemental() {

        ResultSupplemental resultSupplemental =  getResultSupplemental(
	        null, null);

		return resultSupplemental;
       
    }

     /**
     * Data pool factory for ResultSupplemental.
     * @param code A valid Code object
     * @param result A valid Result object
     * @return ResultSupplemental A ResultSupplemental object
     */
    public static ResultSupplemental getResultSupplemental(Code code, Result result) {
        ResultSupplemental resultSupplemental = new ResultSupplemental();     
		if (code != null) {
			code.addResultSupplemental (resultSupplemental);
		}
        resultSupplemental.setCodeDescription(BasicDataGenerator.generateRandomString(2147483647));
        resultSupplemental.setCodeName(BasicDataGenerator.generateRandomString(2147483647));
        resultSupplemental.setCodeSystem(BasicDataGenerator.generateRandomString(2147483647));
        resultSupplemental.setDateCreated(BasicDataGenerator.generateDate());
        resultSupplemental.setDateDisabled(BasicDataGenerator.generateDate());
        resultSupplemental.setDateUpdated(BasicDataGenerator.generateDate());
		if (result != null) {
			result.addResultSupplemental (resultSupplemental);
		}
        resultSupplemental.setResultValue(BasicDataGenerator.generateRandomInt());
        resultSupplemental.setUserCreated(BasicDataGenerator.generateRandomInt());
        resultSupplemental.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return resultSupplemental;
    }

    /**
     * Data pool factory for SecurityRole.
     * @return SecurityRoleA SecurityRole object
     */
    public static SecurityRole getSecurityRole() {

        SecurityRole securityRole = new SecurityRole();    
        
        securityRole.setDateCreated(BasicDataGenerator.generateDate());
        securityRole.setDateDisabled(BasicDataGenerator.generateDate());
        securityRole.setDateUpdated(BasicDataGenerator.generateDate());
        securityRole.setRoleDescription(BasicDataGenerator.generateRandomString(2147483647));
        securityRole.setRoleName(BasicDataGenerator.generateRandomString(2147483647));
        securityRole.setUserCreated(BasicDataGenerator.generateRandomInt());
        securityRole.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return securityRole;
    }

    /**
     * Data pool factory for State.
     * @return StateA State object
     */
    public static State getState() {

        State state = new State();    
        
        state.setAbbreviation(BasicDataGenerator.generateRandomStringChar(2));
        state.setDateCreated(BasicDataGenerator.generateDate());
        state.setDateDisabled(BasicDataGenerator.generateDate());
        state.setDateUpdated(BasicDataGenerator.generateDate());
        state.setName(BasicDataGenerator.generateRandomString(2147483647));
        state.setUserCreated(BasicDataGenerator.generateRandomInt());
        state.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return state;
    }

    /**
     * Data pool factory for StatusCode.
     * @return StatusCodeA StatusCode object
     */
    public static StatusCode getStatusCode() {

        StatusCode statusCode = new StatusCode();    
        
        statusCode.setDateCreated(BasicDataGenerator.generateDate());
        statusCode.setDateDisabled(BasicDataGenerator.generateDate());
        statusCode.setDateUpdated(BasicDataGenerator.generateDate());
        statusCode.setHl7Oid(BasicDataGenerator.generateRandomString(2147483647));
        statusCode.setStatusCodeName(BasicDataGenerator.generateRandomString(2147483647));
        statusCode.setUserCreated(BasicDataGenerator.generateRandomInt());
        statusCode.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return statusCode;
    }

    /**
     * Data pool factory for TemplateRoot.
     * @return TemplateRootA TemplateRoot object
     */
    public static TemplateRoot getTemplateRoot() {

        TemplateRoot templateRoot = new TemplateRoot();    
        
        templateRoot.setDateCreated(BasicDataGenerator.generateDate());
        templateRoot.setDateDisabled(BasicDataGenerator.generateDate());
        templateRoot.setDateUpdated(BasicDataGenerator.generateDate());
        templateRoot.setHl7Oid(BasicDataGenerator.generateRandomString(250));
        templateRoot.setTemplateDescription(BasicDataGenerator.generateRandomString(2147483647));
        templateRoot.setTemplateName(BasicDataGenerator.generateRandomString(250));
        templateRoot.setUserCreated(BasicDataGenerator.generateRandomInt());
        templateRoot.setUserUpdated(BasicDataGenerator.generateRandomInt());

        return templateRoot;
    }

    /**
     * Data pool factory for ValueSet.
     * @return ValueSet A ValueSet object
     */
    public static ValueSet getValueSet() {

        ValueSet valueSet =  getValueSet(
	        null);

		return valueSet;
       
    }

     /**
     * Data pool factory for ValueSet.
     * @param bundle A valid Bundle object
     * @return ValueSet A ValueSet object
     */
    public static ValueSet getValueSet(Bundle bundle) {
        ValueSet valueSet = new ValueSet();     
		if (bundle != null) {
			bundle.addValueSet (valueSet);
		}
        valueSet.setDateCreated(BasicDataGenerator.generateDate());
        valueSet.setDateDisabled(BasicDataGenerator.generateDate());
        valueSet.setDateUpdated(BasicDataGenerator.generateDate());
        valueSet.setHl7Oid(BasicDataGenerator.generateRandomString(250));
        valueSet.setUserCreated(BasicDataGenerator.generateRandomInt());
        valueSet.setUserUpdated(BasicDataGenerator.generateRandomInt());
        valueSet.setValueSetName(BasicDataGenerator.generateRandomString(2147483647));

        return valueSet;
    }

    /**
     * Data pool factory for ValueSetCode.
     * @return ValueSetCode A ValueSetCode object
     */
    public static ValueSetCode getValueSetCode() {

        ValueSetCode valueSetCode =  getValueSetCode(
	        null, null);

		return valueSetCode;
       
    }

     /**
     * Data pool factory for ValueSetCode.
     * @param code A valid Code object
     * @param valueSet A valid ValueSet object
     * @return ValueSetCode A ValueSetCode object
     */
    public static ValueSetCode getValueSetCode(Code code, ValueSet valueSet) {
        ValueSetCode valueSetCode = new ValueSetCode();     
		if (code != null) {
			code.addValueSetCode (valueSetCode);
		}
        valueSetCode.setDateCreated(BasicDataGenerator.generateDate());
        valueSetCode.setDateDisabled(BasicDataGenerator.generateDate());
        valueSetCode.setDateUpdated(BasicDataGenerator.generateDate());
        valueSetCode.setUserCreated(BasicDataGenerator.generateRandomInt());
        valueSetCode.setUserUpdated(BasicDataGenerator.generateRandomInt());
		if (valueSet != null) {
			valueSet.addValueSetCode (valueSetCode);
		}

        return valueSetCode;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public String[] getDBCommitOrder() {
		return Arrays.copyOf(commitOrder, commitOrder.length);
	}

	/** Returns the commit order of this database.
	* Useful for iterating through the classes for deletion in the right order.
	* @return Class[] list of classes
	*/
	public Class<?>[] getDBClassCommitOrder() {
		return Arrays.copyOf(classCommitOrder, classCommitOrder.length);
	}

/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}

	/**
	*   Returns the schema that we used to generate this factory.
	*   @return Schema name
	*/
	public String getSchema(){
		return "caliphr";
	}
	
}
