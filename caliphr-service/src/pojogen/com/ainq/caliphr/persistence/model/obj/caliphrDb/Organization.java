package com.ainq.caliphr.persistence.model.obj.caliphrDb;

import com.ainq.caliphr.persistence.model.obj.caliphrDb.PracticeGroup;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.iface.IOrganization;
import com.ainq.caliphr.persistence.util.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Parameter;
import org.hibernate.proxy.HibernateProxy;

/**
 * Object mapping for hibernate-handled table: organization.
 * 
 *
 * @author autogenerated
 */
		

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;


import javax.persistence.*;

@Entity
@Table(name = "organization", catalog = "caliphr_db", schema = "caliphr")
@Cache(region = "com.ainq.caliphr.persistence.model.obj.caliphrDb.Organization", usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Organization implements Cloneable, Serializable, IPojoGenEntity, IOrganization {

	/** Serial Version UID. */
	private static final long serialVersionUID = -2976219126219903102L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String address2;
	/** Field mapping. */
	private String address1;
	/** Field mapping. */
	private String city;
	/** Field mapping. */
	private Date dateCreated;
	/** Field mapping. */
	private Date dateDisabled;
	/** Field mapping. */
	private Date dateUpdated;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String organizationName;
	/** Field mapping. */
	private String organizationNumber;
	/** Field mapping. */
	private Set<PracticeGroup> practiceGroups = new HashSet<>();

	/** Field mapping. */
	private String stateName;
	/** Field mapping. */
	private OrganizationType type;
	/** Field mapping. */
	private Integer userCreated;
	/** Field mapping. */
	private Integer userUpdated;
	/** Field mapping. */
	private String zipcode;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Organization() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Organization(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Organization.class;
	}


	 /**
	 * Return the value associated with the column: address2.
	 * @return A String object (this.address2)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getAddress2() {
		return this.address2;
		
	}
	

  
	 /**  
	 * Set the value related to the column: address2.
	 * @param address2 the address2 value you wish to set
	 */
	public void setAddress2(final String address2) {
		this.address2 = address2;
	}

	 /**
	 * Return the value associated with the column: address1.
	 * @return A String object (this.address1)
	 */
	@Basic( optional = true )
	@Column( name = "address_1", length = 2147483647  )
	public String getAddress1() {
		return this.address1;
		
	}
	

  
	 /**  
	 * Set the value related to the column: address1.
	 * @param address1 the address1 value you wish to set
	 */
	public void setAddress1(final String address1) {
		this.address1 = address1;
	}

	 /**
	 * Return the value associated with the column: city.
	 * @return A String object (this.city)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getCity() {
		return this.city;
		
	}
	

  
	 /**  
	 * Set the value related to the column: city.
	 * @param city the city value you wish to set
	 */
	public void setCity(final String city) {
		this.city = city;
	}

	 /**
	 * Return the value associated with the column: dateCreated.
	 * @return A Date object (this.dateCreated)
	 */
	@Basic( optional = true )
	@Column( name = "date_created"  )
	public Date getDateCreated() {
		return this.dateCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateCreated.
	 * @param dateCreated the dateCreated value you wish to set
	 */
	public void setDateCreated(final Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	 /**
	 * Return the value associated with the column: dateDisabled.
	 * @return A Date object (this.dateDisabled)
	 */
	@Basic( optional = true )
	@Column( name = "date_disabled"  )
	public Date getDateDisabled() {
		return this.dateDisabled;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateDisabled.
	 * @param dateDisabled the dateDisabled value you wish to set
	 */
	public void setDateDisabled(final Date dateDisabled) {
		this.dateDisabled = dateDisabled;
	}

	 /**
	 * Return the value associated with the column: dateUpdated.
	 * @return A Date object (this.dateUpdated)
	 */
	@Basic( optional = true )
	@Column( name = "date_updated"  )
	public Date getDateUpdated() {
		return this.dateUpdated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateUpdated.
	 * @param dateUpdated the dateUpdated value you wish to set
	 */
	public void setDateUpdated(final Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "organizationOrganization_idGenerator")
	@Basic( optional = false )
	@Column( name = "organization_id", nullable = false  )
	@SequenceGenerator(allocationSize = 1, name = "organizationOrganization_idGenerator", sequenceName = "caliphr_db.caliphr.organization_id_seq", schema = "caliphr", catalog = "caliphr_db")
	public Integer getId() {
		return this.id;
		
	}
	

  
	 /**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	 /**
	 * Return the value associated with the column: organizationName.
	 * @return A String object (this.organizationName)
	 */
	@Basic( optional = true )
	@Column( name = "organization_name", length = 2147483647  )
	public String getOrganizationName() {
		return this.organizationName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: organizationName.
	 * @param organizationName the organizationName value you wish to set
	 */
	public void setOrganizationName(final String organizationName) {
		this.organizationName = organizationName;
	}

	 /**
	 * Return the value associated with the column: organizationNumber.
	 * @return A String object (this.organizationNumber)
	 */
	@Basic( optional = true )
	@Column( name = "organization_number", length = 2147483647  )
	public String getOrganizationNumber() {
		return this.organizationNumber;
		
	}
	

  
	 /**  
	 * Set the value related to the column: organizationNumber.
	 * @param organizationNumber the organizationNumber value you wish to set
	 */
	public void setOrganizationNumber(final String organizationNumber) {
		this.organizationNumber = organizationNumber;
	}

	 /**
	 * Return the value associated with the column: practiceGroup.
	 * @return A Set&lt;PracticeGroup&gt; object (this.practiceGroup)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "organization"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "organization_id", nullable = false  )
	public Set<PracticeGroup> getPracticeGroups() {
		return this.practiceGroups;
		
	}
	
	/**
	 * Adds a bi-directional link of type PracticeGroup to the practiceGroups set.
	 * @param practiceGroup item to add
	 */
	public void addPracticeGroup(PracticeGroup practiceGroup) {
		practiceGroup.setOrganization(this);
		this.practiceGroups.add(practiceGroup);
	}

  
	 /**  
	 * Set the value related to the column: practiceGroup.
	 * @param practiceGroup the practiceGroup value you wish to set
	 */
	public void setPracticeGroups(final Set<PracticeGroup> practiceGroup) {
		this.practiceGroups = practiceGroup;
	}

	 /**
	 * Return the value associated with the column: stateName.
	 * @return A String object (this.stateName)
	 */
	@Basic( optional = true )
	@Column( name = "state_name", length = 2147483647  )
	public String getStateName() {
		return this.stateName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: stateName.
	 * @param stateName the stateName value you wish to set
	 */
	public void setStateName(final String stateName) {
		this.stateName = stateName;
	}

	 /**
	 * Return the value associated with the column: type.
	 * @return A OrganizationType object (this.type)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "type_id", nullable = true )
	public OrganizationType getType() {
		return this.type;
		
	}
	

  
	 /**  
	 * Set the value related to the column: type.
	 * @param type the type value you wish to set
	 */
	public void setType(final OrganizationType type) {
		this.type = type;
	}

	 /**
	 * Return the value associated with the column: userCreated.
	 * @return A Integer object (this.userCreated)
	 */
	@Basic( optional = true )
	@Column( name = "user_created"  )
	public Integer getUserCreated() {
		return this.userCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userCreated.
	 * @param userCreated the userCreated value you wish to set
	 */
	public void setUserCreated(final Integer userCreated) {
		this.userCreated = userCreated;
	}

	 /**
	 * Return the value associated with the column: userUpdated.
	 * @return A Integer object (this.userUpdated)
	 */
	@Basic( optional = true )
	@Column( name = "user_updated"  )
	public Integer getUserUpdated() {
		return this.userUpdated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userUpdated.
	 * @param userUpdated the userUpdated value you wish to set
	 */
	public void setUserUpdated(final Integer userUpdated) {
		this.userUpdated = userUpdated;
	}

	 /**
	 * Return the value associated with the column: zipcode.
	 * @return A String object (this.zipcode)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getZipcode() {
		return this.zipcode;
		
	}
	

  
	 /**  
	 * Set the value related to the column: zipcode.
	 * @param zipcode the zipcode value you wish to set
	 */
	public void setZipcode(final String zipcode) {
		this.zipcode = zipcode;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Organization clone() throws CloneNotSupportedException {
		
        final Organization copy = (Organization)super.clone();

 		copy.setAddress2(this.getAddress2());
 		copy.setAddress1(this.getAddress1());
 		copy.setCity(this.getCity());
 		copy.setDateCreated(this.getDateCreated());
 		copy.setDateDisabled(this.getDateDisabled());
 		copy.setDateUpdated(this.getDateUpdated());
 		copy.setId(this.getId());
 		copy.setOrganizationName(this.getOrganizationName());
 		copy.setOrganizationNumber(this.getOrganizationNumber());
		if (this.getPracticeGroups() != null) {
			copy.getPracticeGroups().addAll(this.getPracticeGroups());
		}
 		copy.setStateName(this.getStateName());
 		copy.setType(this.getType());
 		copy.setUserCreated(this.getUserCreated());
 		copy.setUserUpdated(this.getUserUpdated());
 		copy.setZipcode(this.getZipcode());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("address2: " + this.getAddress2() + ", ");
		sb.append("address1: " + this.getAddress1() + ", ");
		sb.append("city: " + this.getCity() + ", ");
		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("dateDisabled: " + this.getDateDisabled() + ", ");
		sb.append("dateUpdated: " + this.getDateUpdated() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("organizationName: " + this.getOrganizationName() + ", ");
		sb.append("organizationNumber: " + this.getOrganizationNumber() + ", ");
		sb.append("stateName: " + this.getStateName() + ", ");
		sb.append("userCreated: " + this.getUserCreated() + ", ");
		sb.append("userUpdated: " + this.getUserUpdated() + ", ");
		sb.append("zipcode: " + this.getZipcode());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Organization that; 
		try {
			that = (Organization) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAddress2() == null) && (that.getAddress2() == null)) || (getAddress2() != null && getAddress2().equals(that.getAddress2())));
		result = result && (((getAddress1() == null) && (that.getAddress1() == null)) || (getAddress1() != null && getAddress1().equals(that.getAddress1())));
		result = result && (((getCity() == null) && (that.getCity() == null)) || (getCity() != null && getCity().equals(that.getCity())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		result = result && (((getDateDisabled() == null) && (that.getDateDisabled() == null)) || (getDateDisabled() != null && getDateDisabled().equals(that.getDateDisabled())));
		result = result && (((getDateUpdated() == null) && (that.getDateUpdated() == null)) || (getDateUpdated() != null && getDateUpdated().equals(that.getDateUpdated())));
		result = result && (((getOrganizationName() == null) && (that.getOrganizationName() == null)) || (getOrganizationName() != null && getOrganizationName().equals(that.getOrganizationName())));
		result = result && (((getOrganizationNumber() == null) && (that.getOrganizationNumber() == null)) || (getOrganizationNumber() != null && getOrganizationNumber().equals(that.getOrganizationNumber())));
		result = result && (((getStateName() == null) && (that.getStateName() == null)) || (getStateName() != null && getStateName().equals(that.getStateName())));
		result = result && (((getType() == null) && (that.getType() == null)) || (getType() != null && getType().getId().equals(that.getType().getId())));	
		result = result && (((getUserCreated() == null) && (that.getUserCreated() == null)) || (getUserCreated() != null && getUserCreated().equals(that.getUserCreated())));
		result = result && (((getUserUpdated() == null) && (that.getUserUpdated() == null)) || (getUserUpdated() != null && getUserUpdated().equals(that.getUserUpdated())));
		result = result && (((getZipcode() == null) && (that.getZipcode() == null)) || (getZipcode() != null && getZipcode().equals(that.getZipcode())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
	@PreUpdate
	public void preUpdate() {
		this.dateUpdated = new Date();
	}
}
