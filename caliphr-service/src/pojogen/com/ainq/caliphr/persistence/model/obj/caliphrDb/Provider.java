package com.ainq.caliphr.persistence.model.obj.caliphrDb;

import com.ainq.caliphr.persistence.model.obj.caliphrDb.ApplicationUserSecurity;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.HqmfDocument;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientEncounter;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.ProviderPhoneNumber;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.iface.IProvider;
import com.ainq.caliphr.persistence.util.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Parameter;
import org.hibernate.proxy.HibernateProxy;

/**
 * Object mapping for hibernate-handled table: provider.
 * 
 *
 * @author autogenerated
 */
		

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;


import javax.persistence.*;

@Entity
@Table(name = "provider", catalog = "caliphr_db", schema = "caliphr")
@Cache(region = "com.ainq.caliphr.persistence.model.obj.caliphrDb.Provider", usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Cacheable
public class Provider implements Cloneable, Serializable, IPojoGenEntity, IProvider {

	/** Serial Version UID. */
	private static final long serialVersionUID = 2841837950101800123L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String address;
	/** Field mapping. */
	private String address2;
	/** Field mapping. */
	private Set<ApplicationUserSecurity> applicationUserSecurities = new HashSet<>();

	/** Field mapping. */
	private String city;
	/** Field mapping. */
	private String country;
	/** Field mapping. */
	private Date dateCreated;
	/** Field mapping. */
	private Date dateDisabled;
	/** Field mapping. */
	private Date dateUpdated;
	/** Field mapping. */
	private String firstName;
	/** Field mapping. */
	private String fullName;
	/** Field mapping. */
	private PracticeGroup group;
	/** Field mapping. */
	private Set<HqmfDocument> hqmfDocuments = new HashSet<>();

	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String lastName;
	/** Field mapping. */
	private String middleName;
	/** Field mapping. */
	private String npi;
	/** Field mapping. */
	private String orgName;
	/** Field mapping. */
	private Set<PatientEncounter> patientEncounters = new HashSet<>();

	/** Field mapping. */
	private Set<ProviderPhoneNumber> providerPhoneNumbers = new HashSet<>();

	/** Field mapping. */
	private State state;
	/** Field mapping. */
	private String stateValue;
	/** Field mapping. */
	private String taxId;
	/** Field mapping. */
	private ProviderType type;
	/** Field mapping. */
	private Integer userCreated;
	/** Field mapping. */
	private Integer userUpdated;
	/** Field mapping. */
	private String zipcode;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Provider() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Provider(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Provider.class;
	}


	 /**
	 * Return the value associated with the column: address.
	 * @return A String object (this.address)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getAddress() {
		return this.address;
		
	}
	

  
	 /**  
	 * Set the value related to the column: address.
	 * @param address the address value you wish to set
	 */
	public void setAddress(final String address) {
		this.address = address;
	}

	 /**
	 * Return the value associated with the column: address2.
	 * @return A String object (this.address2)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getAddress2() {
		return this.address2;
		
	}
	

  
	 /**  
	 * Set the value related to the column: address2.
	 * @param address2 the address2 value you wish to set
	 */
	public void setAddress2(final String address2) {
		this.address2 = address2;
	}

	 /**
	 * Return the value associated with the column: applicationUserSecurity.
	 * @return A Set&lt;ApplicationUserSecurity&gt; object (this.applicationUserSecurity)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "provider"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "provider_id", nullable = false  )
	public Set<ApplicationUserSecurity> getApplicationUserSecurities() {
		return this.applicationUserSecurities;
		
	}
	
	/**
	 * Adds a bi-directional link of type ApplicationUserSecurity to the applicationUserSecurities set.
	 * @param applicationUserSecurity item to add
	 */
	public void addApplicationUserSecurity(ApplicationUserSecurity applicationUserSecurity) {
		applicationUserSecurity.setProvider(this);
		this.applicationUserSecurities.add(applicationUserSecurity);
	}

  
	 /**  
	 * Set the value related to the column: applicationUserSecurity.
	 * @param applicationUserSecurity the applicationUserSecurity value you wish to set
	 */
	public void setApplicationUserSecurities(final Set<ApplicationUserSecurity> applicationUserSecurity) {
		this.applicationUserSecurities = applicationUserSecurity;
	}

	 /**
	 * Return the value associated with the column: city.
	 * @return A String object (this.city)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getCity() {
		return this.city;
		
	}
	

  
	 /**  
	 * Set the value related to the column: city.
	 * @param city the city value you wish to set
	 */
	public void setCity(final String city) {
		this.city = city;
	}

	 /**
	 * Return the value associated with the column: country.
	 * @return A String object (this.country)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getCountry() {
		return this.country;
		
	}
	

  
	 /**  
	 * Set the value related to the column: country.
	 * @param country the country value you wish to set
	 */
	public void setCountry(final String country) {
		this.country = country;
	}

	 /**
	 * Return the value associated with the column: dateCreated.
	 * @return A Date object (this.dateCreated)
	 */
	@Basic( optional = true )
	@Column( name = "date_created"  )
	public Date getDateCreated() {
		return this.dateCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateCreated.
	 * @param dateCreated the dateCreated value you wish to set
	 */
	public void setDateCreated(final Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	 /**
	 * Return the value associated with the column: dateDisabled.
	 * @return A Date object (this.dateDisabled)
	 */
	@Basic( optional = true )
	@Column( name = "date_disabled"  )
	public Date getDateDisabled() {
		return this.dateDisabled;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateDisabled.
	 * @param dateDisabled the dateDisabled value you wish to set
	 */
	public void setDateDisabled(final Date dateDisabled) {
		this.dateDisabled = dateDisabled;
	}

	 /**
	 * Return the value associated with the column: dateUpdated.
	 * @return A Date object (this.dateUpdated)
	 */
	@Basic( optional = true )
	@Column( name = "date_updated"  )
	public Date getDateUpdated() {
		return this.dateUpdated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateUpdated.
	 * @param dateUpdated the dateUpdated value you wish to set
	 */
	public void setDateUpdated(final Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	 /**
	 * Return the value associated with the column: firstName.
	 * @return A String object (this.firstName)
	 */
	@Basic( optional = true )
	@Column( name = "first_name", length = 250  )
	public String getFirstName() {
		return this.firstName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: firstName.
	 * @param firstName the firstName value you wish to set
	 */
	public void setFirstName(final String firstName) {
		this.firstName = firstName;
	}

	 /**
	 * Return the value associated with the column: fullName.
	 * @return A String object (this.fullName)
	 */
	@Basic( optional = true )
	@Column( name = "full_name", length = 2147483647  )
	public String getFullName() {
		return this.fullName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: fullName.
	 * @param fullName the fullName value you wish to set
	 */
	public void setFullName(final String fullName) {
		this.fullName = fullName;
	}

	 /**
	 * Return the value associated with the column: group.
	 * @return A PracticeGroup object (this.group)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "group_id", nullable = true )
	public PracticeGroup getGroup() {
		return this.group;
		
	}
	

  
	 /**  
	 * Set the value related to the column: group.
	 * @param group the group value you wish to set
	 */
	public void setGroup(final PracticeGroup group) {
		this.group = group;
	}

	 /**
	 * Return the value associated with the column: hqmfDocument.
	 * @return A Set&lt;HqmfDocument&gt; object (this.hqmfDocument)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "provider"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "provider_id", nullable = false  )
	public Set<HqmfDocument> getHqmfDocuments() {
		return this.hqmfDocuments;
		
	}
	
	/**
	 * Adds a bi-directional link of type HqmfDocument to the hqmfDocuments set.
	 * @param hqmfDocument item to add
	 */
	public void addHqmfDocument(HqmfDocument hqmfDocument) {
		hqmfDocument.setProvider(this);
		this.hqmfDocuments.add(hqmfDocument);
	}

  
	 /**  
	 * Set the value related to the column: hqmfDocument.
	 * @param hqmfDocument the hqmfDocument value you wish to set
	 */
	public void setHqmfDocuments(final Set<HqmfDocument> hqmfDocument) {
		this.hqmfDocuments = hqmfDocument;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "providerProvider_idGenerator")
	@Basic( optional = false )
	@Column( name = "provider_id", nullable = false  )
	@SequenceGenerator(allocationSize = 1, name = "providerProvider_idGenerator", sequenceName = "caliphr_db.caliphr.provider_id_seq", schema = "caliphr", catalog = "caliphr_db")
	public Integer getId() {
		return this.id;
		
	}
	

  
	 /**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	 /**
	 * Return the value associated with the column: lastName.
	 * @return A String object (this.lastName)
	 */
	@Basic( optional = true )
	@Column( name = "last_name", length = 250  )
	public String getLastName() {
		return this.lastName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: lastName.
	 * @param lastName the lastName value you wish to set
	 */
	public void setLastName(final String lastName) {
		this.lastName = lastName;
	}

	 /**
	 * Return the value associated with the column: middleName.
	 * @return A String object (this.middleName)
	 */
	@Basic( optional = true )
	@Column( name = "middle_name", length = 250  )
	public String getMiddleName() {
		return this.middleName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: middleName.
	 * @param middleName the middleName value you wish to set
	 */
	public void setMiddleName(final String middleName) {
		this.middleName = middleName;
	}

	 /**
	 * Return the value associated with the column: npi.
	 * @return A String object (this.npi)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getNpi() {
		return this.npi;
		
	}
	

  
	 /**  
	 * Set the value related to the column: npi.
	 * @param npi the npi value you wish to set
	 */
	public void setNpi(final String npi) {
		this.npi = npi;
	}

	 /**
	 * Return the value associated with the column: orgName.
	 * @return A String object (this.orgName)
	 */
	@Basic( optional = true )
	@Column( name = "org_name", length = 250  )
	public String getOrgName() {
		return this.orgName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: orgName.
	 * @param orgName the orgName value you wish to set
	 */
	public void setOrgName(final String orgName) {
		this.orgName = orgName;
	}

	 /**
	 * Return the value associated with the column: patientEncounter.
	 * @return A Set&lt;PatientEncounter&gt; object (this.patientEncounter)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "provider"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "provider_id", nullable = false  )
	public Set<PatientEncounter> getPatientEncounters() {
		return this.patientEncounters;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientEncounter to the patientEncounters set.
	 * @param patientEncounter item to add
	 */
	public void addPatientEncounter(PatientEncounter patientEncounter) {
		patientEncounter.setProvider(this);
		this.patientEncounters.add(patientEncounter);
	}

  
	 /**  
	 * Set the value related to the column: patientEncounter.
	 * @param patientEncounter the patientEncounter value you wish to set
	 */
	public void setPatientEncounters(final Set<PatientEncounter> patientEncounter) {
		this.patientEncounters = patientEncounter;
	}

	 /**
	 * Return the value associated with the column: providerPhoneNumber.
	 * @return A Set&lt;ProviderPhoneNumber&gt; object (this.providerPhoneNumber)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "provider"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "provider_id", nullable = false  )
	public Set<ProviderPhoneNumber> getProviderPhoneNumbers() {
		return this.providerPhoneNumbers;
		
	}
	
	/**
	 * Adds a bi-directional link of type ProviderPhoneNumber to the providerPhoneNumbers set.
	 * @param providerPhoneNumber item to add
	 */
	public void addProviderPhoneNumber(ProviderPhoneNumber providerPhoneNumber) {
		providerPhoneNumber.setProvider(this);
		this.providerPhoneNumbers.add(providerPhoneNumber);
	}

  
	 /**  
	 * Set the value related to the column: providerPhoneNumber.
	 * @param providerPhoneNumber the providerPhoneNumber value you wish to set
	 */
	public void setProviderPhoneNumbers(final Set<ProviderPhoneNumber> providerPhoneNumber) {
		this.providerPhoneNumbers = providerPhoneNumber;
	}

	 /**
	 * Return the value associated with the column: state.
	 * @return A State object (this.state)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "state_id", nullable = true )
	public State getState() {
		return this.state;
		
	}
	

  
	 /**  
	 * Set the value related to the column: state.
	 * @param state the state value you wish to set
	 */
	public void setState(final State state) {
		this.state = state;
	}

	 /**
	 * Return the value associated with the column: stateValue.
	 * @return A String object (this.stateValue)
	 */
	@Basic( optional = true )
	@Column( name = "state_value", length = 2147483647  )
	public String getStateValue() {
		return this.stateValue;
		
	}
	

  
	 /**  
	 * Set the value related to the column: stateValue.
	 * @param stateValue the stateValue value you wish to set
	 */
	public void setStateValue(final String stateValue) {
		this.stateValue = stateValue;
	}

	 /**
	 * Return the value associated with the column: taxId.
	 * @return A String object (this.taxId)
	 */
	@Basic( optional = true )
	@Column( name = "tax_id", length = 250  )
	public String getTaxId() {
		return this.taxId;
		
	}
	

  
	 /**  
	 * Set the value related to the column: taxId.
	 * @param taxId the taxId value you wish to set
	 */
	public void setTaxId(final String taxId) {
		this.taxId = taxId;
	}

	 /**
	 * Return the value associated with the column: type.
	 * @return A ProviderType object (this.type)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "type_id", nullable = true )
	public ProviderType getType() {
		return this.type;
		
	}
	

  
	 /**  
	 * Set the value related to the column: type.
	 * @param type the type value you wish to set
	 */
	public void setType(final ProviderType type) {
		this.type = type;
	}

	 /**
	 * Return the value associated with the column: userCreated.
	 * @return A Integer object (this.userCreated)
	 */
	@Basic( optional = true )
	@Column( name = "user_created"  )
	public Integer getUserCreated() {
		return this.userCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userCreated.
	 * @param userCreated the userCreated value you wish to set
	 */
	public void setUserCreated(final Integer userCreated) {
		this.userCreated = userCreated;
	}

	 /**
	 * Return the value associated with the column: userUpdated.
	 * @return A Integer object (this.userUpdated)
	 */
	@Basic( optional = true )
	@Column( name = "user_updated"  )
	public Integer getUserUpdated() {
		return this.userUpdated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userUpdated.
	 * @param userUpdated the userUpdated value you wish to set
	 */
	public void setUserUpdated(final Integer userUpdated) {
		this.userUpdated = userUpdated;
	}

	 /**
	 * Return the value associated with the column: zipcode.
	 * @return A String object (this.zipcode)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getZipcode() {
		return this.zipcode;
		
	}
	

  
	 /**  
	 * Set the value related to the column: zipcode.
	 * @param zipcode the zipcode value you wish to set
	 */
	public void setZipcode(final String zipcode) {
		this.zipcode = zipcode;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Provider clone() throws CloneNotSupportedException {
		
        final Provider copy = (Provider)super.clone();

 		copy.setAddress(this.getAddress());
 		copy.setAddress2(this.getAddress2());
		if (this.getApplicationUserSecurities() != null) {
			copy.getApplicationUserSecurities().addAll(this.getApplicationUserSecurities());
		}
 		copy.setCity(this.getCity());
 		copy.setCountry(this.getCountry());
 		copy.setDateCreated(this.getDateCreated());
 		copy.setDateDisabled(this.getDateDisabled());
 		copy.setDateUpdated(this.getDateUpdated());
 		copy.setFirstName(this.getFirstName());
 		copy.setFullName(this.getFullName());
 		copy.setGroup(this.getGroup());
		if (this.getHqmfDocuments() != null) {
			copy.getHqmfDocuments().addAll(this.getHqmfDocuments());
		}
 		copy.setId(this.getId());
 		copy.setLastName(this.getLastName());
 		copy.setMiddleName(this.getMiddleName());
 		copy.setNpi(this.getNpi());
 		copy.setOrgName(this.getOrgName());
		if (this.getPatientEncounters() != null) {
			copy.getPatientEncounters().addAll(this.getPatientEncounters());
		}
		if (this.getProviderPhoneNumbers() != null) {
			copy.getProviderPhoneNumbers().addAll(this.getProviderPhoneNumbers());
		}
 		copy.setState(this.getState());
 		copy.setStateValue(this.getStateValue());
 		copy.setTaxId(this.getTaxId());
 		copy.setType(this.getType());
 		copy.setUserCreated(this.getUserCreated());
 		copy.setUserUpdated(this.getUserUpdated());
 		copy.setZipcode(this.getZipcode());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("address: " + this.getAddress() + ", ");
		sb.append("address2: " + this.getAddress2() + ", ");
		sb.append("city: " + this.getCity() + ", ");
		sb.append("country: " + this.getCountry() + ", ");
		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("dateDisabled: " + this.getDateDisabled() + ", ");
		sb.append("dateUpdated: " + this.getDateUpdated() + ", ");
		sb.append("firstName: " + this.getFirstName() + ", ");
		sb.append("fullName: " + this.getFullName() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("lastName: " + this.getLastName() + ", ");
		sb.append("middleName: " + this.getMiddleName() + ", ");
		sb.append("npi: " + this.getNpi() + ", ");
		sb.append("orgName: " + this.getOrgName() + ", ");
		sb.append("stateValue: " + this.getStateValue() + ", ");
		sb.append("taxId: " + this.getTaxId() + ", ");
		sb.append("userCreated: " + this.getUserCreated() + ", ");
		sb.append("userUpdated: " + this.getUserUpdated() + ", ");
		sb.append("zipcode: " + this.getZipcode());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Provider that; 
		try {
			that = (Provider) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAddress() == null) && (that.getAddress() == null)) || (getAddress() != null && getAddress().equals(that.getAddress())));
		result = result && (((getAddress2() == null) && (that.getAddress2() == null)) || (getAddress2() != null && getAddress2().equals(that.getAddress2())));
		result = result && (((getCity() == null) && (that.getCity() == null)) || (getCity() != null && getCity().equals(that.getCity())));
		result = result && (((getCountry() == null) && (that.getCountry() == null)) || (getCountry() != null && getCountry().equals(that.getCountry())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		result = result && (((getDateDisabled() == null) && (that.getDateDisabled() == null)) || (getDateDisabled() != null && getDateDisabled().equals(that.getDateDisabled())));
		result = result && (((getDateUpdated() == null) && (that.getDateUpdated() == null)) || (getDateUpdated() != null && getDateUpdated().equals(that.getDateUpdated())));
		result = result && (((getFirstName() == null) && (that.getFirstName() == null)) || (getFirstName() != null && getFirstName().equals(that.getFirstName())));
		result = result && (((getFullName() == null) && (that.getFullName() == null)) || (getFullName() != null && getFullName().equals(that.getFullName())));
		result = result && (((getGroup() == null) && (that.getGroup() == null)) || (getGroup() != null && getGroup().getId().equals(that.getGroup().getId())));	
		result = result && (((getLastName() == null) && (that.getLastName() == null)) || (getLastName() != null && getLastName().equals(that.getLastName())));
		result = result && (((getMiddleName() == null) && (that.getMiddleName() == null)) || (getMiddleName() != null && getMiddleName().equals(that.getMiddleName())));
		result = result && (((getNpi() == null) && (that.getNpi() == null)) || (getNpi() != null && getNpi().equals(that.getNpi())));
		result = result && (((getOrgName() == null) && (that.getOrgName() == null)) || (getOrgName() != null && getOrgName().equals(that.getOrgName())));
		result = result && (((getState() == null) && (that.getState() == null)) || (getState() != null && getState().getId().equals(that.getState().getId())));	
		result = result && (((getStateValue() == null) && (that.getStateValue() == null)) || (getStateValue() != null && getStateValue().equals(that.getStateValue())));
		result = result && (((getTaxId() == null) && (that.getTaxId() == null)) || (getTaxId() != null && getTaxId().equals(that.getTaxId())));
		result = result && (((getType() == null) && (that.getType() == null)) || (getType() != null && getType().getId().equals(that.getType().getId())));	
		result = result && (((getUserCreated() == null) && (that.getUserCreated() == null)) || (getUserCreated() != null && getUserCreated().equals(that.getUserCreated())));
		result = result && (((getUserUpdated() == null) && (that.getUserUpdated() == null)) || (getUserUpdated() != null && getUserUpdated().equals(that.getUserUpdated())));
		result = result && (((getZipcode() == null) && (that.getZipcode() == null)) || (getZipcode() != null && getZipcode().equals(that.getZipcode())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
	@PreUpdate
	public void preUpdate() {
		this.dateUpdated = new Date();
	}
}
