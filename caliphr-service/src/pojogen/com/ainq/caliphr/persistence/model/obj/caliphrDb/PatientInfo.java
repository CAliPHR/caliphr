package com.ainq.caliphr.persistence.model.obj.caliphrDb;

import com.ainq.caliphr.persistence.enums.subtype.caliphrDb.PatientInfoSubclassType;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.ClinicalDocument;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientAdvancedDirective;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientAllergy;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientEncounter;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientFamilyHistory;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientFuncCogStatus;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientImmunization;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientInstruction;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientMedicalEquipment;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientMedication;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientPayer;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientPhoneNumber;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientPlanOfCare;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientProblem;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientProcedure;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientReasonForReferral;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientReasonForVisit;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientResult;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientSocialHistory;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientVitalSign;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.ResultPatient;
import com.ainq.caliphr.persistence.model.obj.caliphrDb.iface.IPatientInfo;
import com.ainq.caliphr.persistence.util.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Parameter;
import org.hibernate.proxy.HibernateProxy;

/**
 * Object mapping for hibernate-handled table: patient_info.
 * 
 *
 * @author autogenerated
 */
		

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;


import javax.persistence.*;

@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@Table(name = "patient_info", catalog = "caliphr_db", schema = "caliphr")
@Cache(region = "com.ainq.caliphr.persistence.model.obj.caliphrDb.PatientInfo", usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class PatientInfo implements Cloneable, Serializable, IPojoGenEntity, IPatientInfo {

	/** Serial Version UID. */
	private static final long serialVersionUID = 7342452041424157380L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Set<ClinicalDocument> clinicalDocuments = new HashSet<>();

	/** Field mapping. */
	private Date dateCreated;
	/** Field mapping. */
	private Date dateDisabled;
	/** Field mapping. */
	private Date dateUpdated;
	/** Field mapping. */
	private Code ethnicityCode;
	/** Field mapping. */
	private String ethnicityCodeDescription;
	/** Field mapping. */
	private Boolean expired;
	/** Field mapping. */
	private Code genderCode;
	/** Field mapping. */
	private String genderCodeDescription;
	/** Field mapping. */
	private PracticeGroup group;
	/** Field mapping. */
	private String guardian;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String languageCommunication;
	/** Field mapping. */
	private String maritalStatus;
	/** Field mapping. */
	private Set<PatientAdvancedDirective> patientAdvancedDirectives = new HashSet<>();

	/** Field mapping. */
	private Set<PatientAllergy> patientAllergies = new HashSet<>();

	/** Field mapping. */
	private Set<PatientEncounter> patientEncounters = new HashSet<>();

	/** Field mapping. */
	private Set<PatientFamilyHistory> patientFamilyHistories = new HashSet<>();

	/** Field mapping. */
	private Set<PatientFuncCogStatus> patientFuncCogStatuses = new HashSet<>();

	/** Field mapping. */
	private Set<PatientImmunization> patientImmunizations = new HashSet<>();

	/** Field mapping. */
	private Set<PatientInstruction> patientInstructions = new HashSet<>();

	/** Field mapping. */
	private Set<PatientMedicalEquipment> patientMedicalEquipments = new HashSet<>();

	/** Field mapping. */
	private Set<PatientMedication> patientMedications = new HashSet<>();

	/** Field mapping. */
	private Set<PatientPayer> patientPayers = new HashSet<>();

	/** Field mapping. */
	private Set<PatientPhoneNumber> patientPhoneNumbers = new HashSet<>();

	/** Field mapping. */
	private Set<PatientPlanOfCare> patientPlanOfCares = new HashSet<>();

	/** Field mapping. */
	private Set<PatientProblem> patientProblems = new HashSet<>();

	/** Field mapping. */
	private Set<PatientProcedure> patientProcedures = new HashSet<>();

	/** Field mapping. */
	private Set<PatientReasonForReferral> patientReasonForReferrals = new HashSet<>();

	/** Field mapping. */
	private Set<PatientReasonForVisit> patientReasonForVisits = new HashSet<>();

	/** Field mapping. */
	private Set<PatientResult> patientResults = new HashSet<>();

	/** Field mapping. */
	private Set<PatientSocialHistory> patientSocialHistories = new HashSet<>();

	/** Field mapping. */
	private Set<PatientVitalSign> patientVitalSigns = new HashSet<>();

	/** Field mapping. */
	private Code raceCode;
	/** Field mapping. */
	private String raceCodeDescription;
	/** Field mapping. */
	private String religiousAffiliations;
	/** Field mapping. */
	private Set<ResultPatient> resultPatients = new HashSet<>();

	/** Field mapping. */
	private Integer userCreated;
	/** Field mapping. */
	private Integer userUpdated;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public PatientInfo() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public PatientInfo(Integer id) {
		this.id = id;
	}
	
 


 	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return PatientInfoSubclassType enum.
 	 */
 	@Transient
 	public PatientInfoSubclassType getPatientInfoSubclassType() {
		return PatientInfoSubclassType.NOT_A_CHILD;
 	}  
  
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return PatientInfo.class;
	}


	 /**
	 * Return the value associated with the column: clinicalDocument.
	 * @return A Set&lt;ClinicalDocument&gt; object (this.clinicalDocument)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<ClinicalDocument> getClinicalDocuments() {
		return this.clinicalDocuments;
		
	}
	
	/**
	 * Adds a bi-directional link of type ClinicalDocument to the clinicalDocuments set.
	 * @param clinicalDocument item to add
	 */
	public void addClinicalDocument(ClinicalDocument clinicalDocument) {
		clinicalDocument.setPatient(this);
		this.clinicalDocuments.add(clinicalDocument);
	}

  
	 /**  
	 * Set the value related to the column: clinicalDocument.
	 * @param clinicalDocument the clinicalDocument value you wish to set
	 */
	public void setClinicalDocuments(final Set<ClinicalDocument> clinicalDocument) {
		this.clinicalDocuments = clinicalDocument;
	}

	 /**
	 * Return the value associated with the column: dateCreated.
	 * @return A Date object (this.dateCreated)
	 */
	@Basic( optional = true )
	@Column( name = "date_created"  )
	public Date getDateCreated() {
		return this.dateCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateCreated.
	 * @param dateCreated the dateCreated value you wish to set
	 */
	public void setDateCreated(final Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	 /**
	 * Return the value associated with the column: dateDisabled.
	 * @return A Date object (this.dateDisabled)
	 */
	@Basic( optional = true )
	@Column( name = "date_disabled"  )
	public Date getDateDisabled() {
		return this.dateDisabled;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateDisabled.
	 * @param dateDisabled the dateDisabled value you wish to set
	 */
	public void setDateDisabled(final Date dateDisabled) {
		this.dateDisabled = dateDisabled;
	}

	 /**
	 * Return the value associated with the column: dateUpdated.
	 * @return A Date object (this.dateUpdated)
	 */
	@Basic( optional = true )
	@Column( name = "date_updated"  )
	public Date getDateUpdated() {
		return this.dateUpdated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateUpdated.
	 * @param dateUpdated the dateUpdated value you wish to set
	 */
	public void setDateUpdated(final Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	 /**
	 * Return the value associated with the column: ethnicityCode.
	 * @return A Code object (this.ethnicityCode)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "ethnicity_code_id", nullable = true )
	public Code getEthnicityCode() {
		return this.ethnicityCode;
		
	}
	

  
	 /**  
	 * Set the value related to the column: ethnicityCode.
	 * @param ethnicityCode the ethnicityCode value you wish to set
	 */
	public void setEthnicityCode(final Code ethnicityCode) {
		this.ethnicityCode = ethnicityCode;
	}

	 /**
	 * Return the value associated with the column: ethnicityCodeDescription.
	 * @return A String object (this.ethnicityCodeDescription)
	 */
	@Basic( optional = true )
	@Column( name = "ethnicity_code_description", length = 2147483647  )
	public String getEthnicityCodeDescription() {
		return this.ethnicityCodeDescription;
		
	}
	

  
	 /**  
	 * Set the value related to the column: ethnicityCodeDescription.
	 * @param ethnicityCodeDescription the ethnicityCodeDescription value you wish to set
	 */
	public void setEthnicityCodeDescription(final String ethnicityCodeDescription) {
		this.ethnicityCodeDescription = ethnicityCodeDescription;
	}

	 /**
	 * Return the value associated with the column: expired.
	 * @return A Boolean object (this.expired)
	 */
	public Boolean isExpired() {
		return this.expired;
		
	}
	

  
	 /**  
	 * Set the value related to the column: expired.
	 * @param expired the expired value you wish to set
	 */
	public void setExpired(final Boolean expired) {
		this.expired = expired;
	}

	 /**
	 * Return the value associated with the column: genderCode.
	 * @return A Code object (this.genderCode)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "gender_code_id", nullable = true )
	public Code getGenderCode() {
		return this.genderCode;
		
	}
	

  
	 /**  
	 * Set the value related to the column: genderCode.
	 * @param genderCode the genderCode value you wish to set
	 */
	public void setGenderCode(final Code genderCode) {
		this.genderCode = genderCode;
	}

	 /**
	 * Return the value associated with the column: genderCodeDescription.
	 * @return A String object (this.genderCodeDescription)
	 */
	@Basic( optional = true )
	@Column( name = "gender_code_description", length = 2147483647  )
	public String getGenderCodeDescription() {
		return this.genderCodeDescription;
		
	}
	

  
	 /**  
	 * Set the value related to the column: genderCodeDescription.
	 * @param genderCodeDescription the genderCodeDescription value you wish to set
	 */
	public void setGenderCodeDescription(final String genderCodeDescription) {
		this.genderCodeDescription = genderCodeDescription;
	}

	 /**
	 * Return the value associated with the column: group.
	 * @return A PracticeGroup object (this.group)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "group_id", nullable = true )
	public PracticeGroup getGroup() {
		return this.group;
		
	}
	

  
	 /**  
	 * Set the value related to the column: group.
	 * @param group the group value you wish to set
	 */
	public void setGroup(final PracticeGroup group) {
		this.group = group;
	}

	 /**
	 * Return the value associated with the column: guardian.
	 * @return A String object (this.guardian)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getGuardian() {
		return this.guardian;
		
	}
	

  
	 /**  
	 * Set the value related to the column: guardian.
	 * @param guardian the guardian value you wish to set
	 */
	public void setGuardian(final String guardian) {
		this.guardian = guardian;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "patientInfoPatient_idGenerator")
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	@SequenceGenerator(allocationSize = 1, name = "patientInfoPatient_idGenerator", sequenceName = "caliphr_db.caliphr.patient_info_id_seq", schema = "caliphr", catalog = "caliphr_db")
	public Integer getId() {
		return this.id;
		
	}
	

  
	 /**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	 /**
	 * Return the value associated with the column: languageCommunication.
	 * @return A String object (this.languageCommunication)
	 */
	@Basic( optional = true )
	@Column( name = "language_communication", length = 2147483647  )
	public String getLanguageCommunication() {
		return this.languageCommunication;
		
	}
	

  
	 /**  
	 * Set the value related to the column: languageCommunication.
	 * @param languageCommunication the languageCommunication value you wish to set
	 */
	public void setLanguageCommunication(final String languageCommunication) {
		this.languageCommunication = languageCommunication;
	}

	 /**
	 * Return the value associated with the column: maritalStatus.
	 * @return A String object (this.maritalStatus)
	 */
	@Basic( optional = true )
	@Column( name = "marital_status", length = 2147483647  )
	public String getMaritalStatus() {
		return this.maritalStatus;
		
	}
	

  
	 /**  
	 * Set the value related to the column: maritalStatus.
	 * @param maritalStatus the maritalStatus value you wish to set
	 */
	public void setMaritalStatus(final String maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	 /**
	 * Return the value associated with the column: patientAdvancedDirective.
	 * @return A Set&lt;PatientAdvancedDirective&gt; object (this.patientAdvancedDirective)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientAdvancedDirective> getPatientAdvancedDirectives() {
		return this.patientAdvancedDirectives;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientAdvancedDirective to the patientAdvancedDirectives set.
	 * @param patientAdvancedDirective item to add
	 */
	public void addPatientAdvancedDirective(PatientAdvancedDirective patientAdvancedDirective) {
		patientAdvancedDirective.setPatient(this);
		this.patientAdvancedDirectives.add(patientAdvancedDirective);
	}

  
	 /**  
	 * Set the value related to the column: patientAdvancedDirective.
	 * @param patientAdvancedDirective the patientAdvancedDirective value you wish to set
	 */
	public void setPatientAdvancedDirectives(final Set<PatientAdvancedDirective> patientAdvancedDirective) {
		this.patientAdvancedDirectives = patientAdvancedDirective;
	}

	 /**
	 * Return the value associated with the column: patientAllergy.
	 * @return A Set&lt;PatientAllergy&gt; object (this.patientAllergy)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientAllergy> getPatientAllergies() {
		return this.patientAllergies;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientAllergy to the patientAllergies set.
	 * @param patientAllergy item to add
	 */
	public void addPatientAllergy(PatientAllergy patientAllergy) {
		patientAllergy.setPatient(this);
		this.patientAllergies.add(patientAllergy);
	}

  
	 /**  
	 * Set the value related to the column: patientAllergy.
	 * @param patientAllergy the patientAllergy value you wish to set
	 */
	public void setPatientAllergies(final Set<PatientAllergy> patientAllergy) {
		this.patientAllergies = patientAllergy;
	}

	 /**
	 * Return the value associated with the column: patientEncounter.
	 * @return A Set&lt;PatientEncounter&gt; object (this.patientEncounter)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientEncounter> getPatientEncounters() {
		return this.patientEncounters;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientEncounter to the patientEncounters set.
	 * @param patientEncounter item to add
	 */
	public void addPatientEncounter(PatientEncounter patientEncounter) {
		patientEncounter.setPatient(this);
		this.patientEncounters.add(patientEncounter);
	}

  
	 /**  
	 * Set the value related to the column: patientEncounter.
	 * @param patientEncounter the patientEncounter value you wish to set
	 */
	public void setPatientEncounters(final Set<PatientEncounter> patientEncounter) {
		this.patientEncounters = patientEncounter;
	}

	 /**
	 * Return the value associated with the column: patientFamilyHistory.
	 * @return A Set&lt;PatientFamilyHistory&gt; object (this.patientFamilyHistory)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientFamilyHistory> getPatientFamilyHistories() {
		return this.patientFamilyHistories;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientFamilyHistory to the patientFamilyHistories set.
	 * @param patientFamilyHistory item to add
	 */
	public void addPatientFamilyHistory(PatientFamilyHistory patientFamilyHistory) {
		patientFamilyHistory.setPatient(this);
		this.patientFamilyHistories.add(patientFamilyHistory);
	}

  
	 /**  
	 * Set the value related to the column: patientFamilyHistory.
	 * @param patientFamilyHistory the patientFamilyHistory value you wish to set
	 */
	public void setPatientFamilyHistories(final Set<PatientFamilyHistory> patientFamilyHistory) {
		this.patientFamilyHistories = patientFamilyHistory;
	}

	 /**
	 * Return the value associated with the column: patientFuncCogStatus.
	 * @return A Set&lt;PatientFuncCogStatus&gt; object (this.patientFuncCogStatus)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientFuncCogStatus> getPatientFuncCogStatuses() {
		return this.patientFuncCogStatuses;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientFuncCogStatus to the patientFuncCogStatuses set.
	 * @param patientFuncCogStatus item to add
	 */
	public void addPatientFuncCogStatus(PatientFuncCogStatus patientFuncCogStatus) {
		patientFuncCogStatus.setPatient(this);
		this.patientFuncCogStatuses.add(patientFuncCogStatus);
	}

  
	 /**  
	 * Set the value related to the column: patientFuncCogStatus.
	 * @param patientFuncCogStatus the patientFuncCogStatus value you wish to set
	 */
	public void setPatientFuncCogStatuses(final Set<PatientFuncCogStatus> patientFuncCogStatus) {
		this.patientFuncCogStatuses = patientFuncCogStatus;
	}

	 /**
	 * Return the value associated with the column: patientImmunization.
	 * @return A Set&lt;PatientImmunization&gt; object (this.patientImmunization)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientImmunization> getPatientImmunizations() {
		return this.patientImmunizations;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientImmunization to the patientImmunizations set.
	 * @param patientImmunization item to add
	 */
	public void addPatientImmunization(PatientImmunization patientImmunization) {
		patientImmunization.setPatient(this);
		this.patientImmunizations.add(patientImmunization);
	}

  
	 /**  
	 * Set the value related to the column: patientImmunization.
	 * @param patientImmunization the patientImmunization value you wish to set
	 */
	public void setPatientImmunizations(final Set<PatientImmunization> patientImmunization) {
		this.patientImmunizations = patientImmunization;
	}

	 /**
	 * Return the value associated with the column: patientInstruction.
	 * @return A Set&lt;PatientInstruction&gt; object (this.patientInstruction)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientInstruction> getPatientInstructions() {
		return this.patientInstructions;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientInstruction to the patientInstructions set.
	 * @param patientInstruction item to add
	 */
	public void addPatientInstruction(PatientInstruction patientInstruction) {
		patientInstruction.setPatient(this);
		this.patientInstructions.add(patientInstruction);
	}

  
	 /**  
	 * Set the value related to the column: patientInstruction.
	 * @param patientInstruction the patientInstruction value you wish to set
	 */
	public void setPatientInstructions(final Set<PatientInstruction> patientInstruction) {
		this.patientInstructions = patientInstruction;
	}

	 /**
	 * Return the value associated with the column: patientMedicalEquipment.
	 * @return A Set&lt;PatientMedicalEquipment&gt; object (this.patientMedicalEquipment)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientMedicalEquipment> getPatientMedicalEquipments() {
		return this.patientMedicalEquipments;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientMedicalEquipment to the patientMedicalEquipments set.
	 * @param patientMedicalEquipment item to add
	 */
	public void addPatientMedicalEquipment(PatientMedicalEquipment patientMedicalEquipment) {
		patientMedicalEquipment.setPatient(this);
		this.patientMedicalEquipments.add(patientMedicalEquipment);
	}

  
	 /**  
	 * Set the value related to the column: patientMedicalEquipment.
	 * @param patientMedicalEquipment the patientMedicalEquipment value you wish to set
	 */
	public void setPatientMedicalEquipments(final Set<PatientMedicalEquipment> patientMedicalEquipment) {
		this.patientMedicalEquipments = patientMedicalEquipment;
	}

	 /**
	 * Return the value associated with the column: patientMedication.
	 * @return A Set&lt;PatientMedication&gt; object (this.patientMedication)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientMedication> getPatientMedications() {
		return this.patientMedications;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientMedication to the patientMedications set.
	 * @param patientMedication item to add
	 */
	public void addPatientMedication(PatientMedication patientMedication) {
		patientMedication.setPatient(this);
		this.patientMedications.add(patientMedication);
	}

  
	 /**  
	 * Set the value related to the column: patientMedication.
	 * @param patientMedication the patientMedication value you wish to set
	 */
	public void setPatientMedications(final Set<PatientMedication> patientMedication) {
		this.patientMedications = patientMedication;
	}

	 /**
	 * Return the value associated with the column: patientPayer.
	 * @return A Set&lt;PatientPayer&gt; object (this.patientPayer)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientPayer> getPatientPayers() {
		return this.patientPayers;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientPayer to the patientPayers set.
	 * @param patientPayer item to add
	 */
	public void addPatientPayer(PatientPayer patientPayer) {
		patientPayer.setPatient(this);
		this.patientPayers.add(patientPayer);
	}

  
	 /**  
	 * Set the value related to the column: patientPayer.
	 * @param patientPayer the patientPayer value you wish to set
	 */
	public void setPatientPayers(final Set<PatientPayer> patientPayer) {
		this.patientPayers = patientPayer;
	}

	 /**
	 * Return the value associated with the column: patientPhoneNumber.
	 * @return A Set&lt;PatientPhoneNumber&gt; object (this.patientPhoneNumber)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientPhoneNumber> getPatientPhoneNumbers() {
		return this.patientPhoneNumbers;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientPhoneNumber to the patientPhoneNumbers set.
	 * @param patientPhoneNumber item to add
	 */
	public void addPatientPhoneNumber(PatientPhoneNumber patientPhoneNumber) {
		patientPhoneNumber.setPatient(this);
		this.patientPhoneNumbers.add(patientPhoneNumber);
	}

  
	 /**  
	 * Set the value related to the column: patientPhoneNumber.
	 * @param patientPhoneNumber the patientPhoneNumber value you wish to set
	 */
	public void setPatientPhoneNumbers(final Set<PatientPhoneNumber> patientPhoneNumber) {
		this.patientPhoneNumbers = patientPhoneNumber;
	}

	 /**
	 * Return the value associated with the column: patientPlanOfCare.
	 * @return A Set&lt;PatientPlanOfCare&gt; object (this.patientPlanOfCare)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientPlanOfCare> getPatientPlanOfCares() {
		return this.patientPlanOfCares;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientPlanOfCare to the patientPlanOfCares set.
	 * @param patientPlanOfCare item to add
	 */
	public void addPatientPlanOfCare(PatientPlanOfCare patientPlanOfCare) {
		patientPlanOfCare.setPatient(this);
		this.patientPlanOfCares.add(patientPlanOfCare);
	}

  
	 /**  
	 * Set the value related to the column: patientPlanOfCare.
	 * @param patientPlanOfCare the patientPlanOfCare value you wish to set
	 */
	public void setPatientPlanOfCares(final Set<PatientPlanOfCare> patientPlanOfCare) {
		this.patientPlanOfCares = patientPlanOfCare;
	}

	 /**
	 * Return the value associated with the column: patientProblem.
	 * @return A Set&lt;PatientProblem&gt; object (this.patientProblem)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientProblem> getPatientProblems() {
		return this.patientProblems;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientProblem to the patientProblems set.
	 * @param patientProblem item to add
	 */
	public void addPatientProblem(PatientProblem patientProblem) {
		patientProblem.setPatient(this);
		this.patientProblems.add(patientProblem);
	}

  
	 /**  
	 * Set the value related to the column: patientProblem.
	 * @param patientProblem the patientProblem value you wish to set
	 */
	public void setPatientProblems(final Set<PatientProblem> patientProblem) {
		this.patientProblems = patientProblem;
	}

	 /**
	 * Return the value associated with the column: patientProcedure.
	 * @return A Set&lt;PatientProcedure&gt; object (this.patientProcedure)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientProcedure> getPatientProcedures() {
		return this.patientProcedures;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientProcedure to the patientProcedures set.
	 * @param patientProcedure item to add
	 */
	public void addPatientProcedure(PatientProcedure patientProcedure) {
		patientProcedure.setPatient(this);
		this.patientProcedures.add(patientProcedure);
	}

  
	 /**  
	 * Set the value related to the column: patientProcedure.
	 * @param patientProcedure the patientProcedure value you wish to set
	 */
	public void setPatientProcedures(final Set<PatientProcedure> patientProcedure) {
		this.patientProcedures = patientProcedure;
	}

	 /**
	 * Return the value associated with the column: patientReasonForReferral.
	 * @return A Set&lt;PatientReasonForReferral&gt; object (this.patientReasonForReferral)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientReasonForReferral> getPatientReasonForReferrals() {
		return this.patientReasonForReferrals;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientReasonForReferral to the patientReasonForReferrals set.
	 * @param patientReasonForReferral item to add
	 */
	public void addPatientReasonForReferral(PatientReasonForReferral patientReasonForReferral) {
		patientReasonForReferral.setPatient(this);
		this.patientReasonForReferrals.add(patientReasonForReferral);
	}

  
	 /**  
	 * Set the value related to the column: patientReasonForReferral.
	 * @param patientReasonForReferral the patientReasonForReferral value you wish to set
	 */
	public void setPatientReasonForReferrals(final Set<PatientReasonForReferral> patientReasonForReferral) {
		this.patientReasonForReferrals = patientReasonForReferral;
	}

	 /**
	 * Return the value associated with the column: patientReasonForVisit.
	 * @return A Set&lt;PatientReasonForVisit&gt; object (this.patientReasonForVisit)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientReasonForVisit> getPatientReasonForVisits() {
		return this.patientReasonForVisits;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientReasonForVisit to the patientReasonForVisits set.
	 * @param patientReasonForVisit item to add
	 */
	public void addPatientReasonForVisit(PatientReasonForVisit patientReasonForVisit) {
		patientReasonForVisit.setPatient(this);
		this.patientReasonForVisits.add(patientReasonForVisit);
	}

  
	 /**  
	 * Set the value related to the column: patientReasonForVisit.
	 * @param patientReasonForVisit the patientReasonForVisit value you wish to set
	 */
	public void setPatientReasonForVisits(final Set<PatientReasonForVisit> patientReasonForVisit) {
		this.patientReasonForVisits = patientReasonForVisit;
	}

	 /**
	 * Return the value associated with the column: patientResult.
	 * @return A Set&lt;PatientResult&gt; object (this.patientResult)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientResult> getPatientResults() {
		return this.patientResults;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientResult to the patientResults set.
	 * @param patientResult item to add
	 */
	public void addPatientResult(PatientResult patientResult) {
		patientResult.setPatient(this);
		this.patientResults.add(patientResult);
	}

  
	 /**  
	 * Set the value related to the column: patientResult.
	 * @param patientResult the patientResult value you wish to set
	 */
	public void setPatientResults(final Set<PatientResult> patientResult) {
		this.patientResults = patientResult;
	}

	 /**
	 * Return the value associated with the column: patientSocialHistory.
	 * @return A Set&lt;PatientSocialHistory&gt; object (this.patientSocialHistory)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientSocialHistory> getPatientSocialHistories() {
		return this.patientSocialHistories;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientSocialHistory to the patientSocialHistories set.
	 * @param patientSocialHistory item to add
	 */
	public void addPatientSocialHistory(PatientSocialHistory patientSocialHistory) {
		patientSocialHistory.setPatient(this);
		this.patientSocialHistories.add(patientSocialHistory);
	}

  
	 /**  
	 * Set the value related to the column: patientSocialHistory.
	 * @param patientSocialHistory the patientSocialHistory value you wish to set
	 */
	public void setPatientSocialHistories(final Set<PatientSocialHistory> patientSocialHistory) {
		this.patientSocialHistories = patientSocialHistory;
	}

	 /**
	 * Return the value associated with the column: patientVitalSign.
	 * @return A Set&lt;PatientVitalSign&gt; object (this.patientVitalSign)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<PatientVitalSign> getPatientVitalSigns() {
		return this.patientVitalSigns;
		
	}
	
	/**
	 * Adds a bi-directional link of type PatientVitalSign to the patientVitalSigns set.
	 * @param patientVitalSign item to add
	 */
	public void addPatientVitalSign(PatientVitalSign patientVitalSign) {
		patientVitalSign.setPatient(this);
		this.patientVitalSigns.add(patientVitalSign);
	}

  
	 /**  
	 * Set the value related to the column: patientVitalSign.
	 * @param patientVitalSign the patientVitalSign value you wish to set
	 */
	public void setPatientVitalSigns(final Set<PatientVitalSign> patientVitalSign) {
		this.patientVitalSigns = patientVitalSign;
	}

	 /**
	 * Return the value associated with the column: raceCode.
	 * @return A Code object (this.raceCode)
	 */

	@JsonBackReference @ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "race_code_id", nullable = true )
	public Code getRaceCode() {
		return this.raceCode;
		
	}
	

  
	 /**  
	 * Set the value related to the column: raceCode.
	 * @param raceCode the raceCode value you wish to set
	 */
	public void setRaceCode(final Code raceCode) {
		this.raceCode = raceCode;
	}

	 /**
	 * Return the value associated with the column: raceCodeDescription.
	 * @return A String object (this.raceCodeDescription)
	 */
	@Basic( optional = true )
	@Column( name = "race_code_description", length = 2147483647  )
	public String getRaceCodeDescription() {
		return this.raceCodeDescription;
		
	}
	

  
	 /**  
	 * Set the value related to the column: raceCodeDescription.
	 * @param raceCodeDescription the raceCodeDescription value you wish to set
	 */
	public void setRaceCodeDescription(final String raceCodeDescription) {
		this.raceCodeDescription = raceCodeDescription;
	}

	 /**
	 * Return the value associated with the column: religiousAffiliations.
	 * @return A String object (this.religiousAffiliations)
	 */
	@Basic( optional = true )
	@Column( name = "religious_affiliations", length = 2147483647  )
	public String getReligiousAffiliations() {
		return this.religiousAffiliations;
		
	}
	

  
	 /**  
	 * Set the value related to the column: religiousAffiliations.
	 * @param religiousAffiliations the religiousAffiliations value you wish to set
	 */
	public void setReligiousAffiliations(final String religiousAffiliations) {
		this.religiousAffiliations = religiousAffiliations;
	}

	 /**
	 * Return the value associated with the column: resultPatient.
	 * @return A Set&lt;ResultPatient&gt; object (this.resultPatient)
	 */
	@JsonManagedReference @OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "patient"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "patient_id", nullable = false  )
	public Set<ResultPatient> getResultPatients() {
		return this.resultPatients;
		
	}
	
	/**
	 * Adds a bi-directional link of type ResultPatient to the resultPatients set.
	 * @param resultPatient item to add
	 */
	public void addResultPatient(ResultPatient resultPatient) {
		resultPatient.setPatient(this);
		this.resultPatients.add(resultPatient);
	}

  
	 /**  
	 * Set the value related to the column: resultPatient.
	 * @param resultPatient the resultPatient value you wish to set
	 */
	public void setResultPatients(final Set<ResultPatient> resultPatient) {
		this.resultPatients = resultPatient;
	}

	 /**
	 * Return the value associated with the column: userCreated.
	 * @return A Integer object (this.userCreated)
	 */
	@Basic( optional = true )
	@Column( name = "user_created"  )
	public Integer getUserCreated() {
		return this.userCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userCreated.
	 * @param userCreated the userCreated value you wish to set
	 */
	public void setUserCreated(final Integer userCreated) {
		this.userCreated = userCreated;
	}

	 /**
	 * Return the value associated with the column: userUpdated.
	 * @return A Integer object (this.userUpdated)
	 */
	@Basic( optional = true )
	@Column( name = "user_updated"  )
	public Integer getUserUpdated() {
		return this.userUpdated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: userUpdated.
	 * @param userUpdated the userUpdated value you wish to set
	 */
	public void setUserUpdated(final Integer userUpdated) {
		this.userUpdated = userUpdated;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public PatientInfo clone() throws CloneNotSupportedException {
		
        final PatientInfo copy = (PatientInfo)super.clone();

		if (this.getClinicalDocuments() != null) {
			copy.getClinicalDocuments().addAll(this.getClinicalDocuments());
		}
 		copy.setDateCreated(this.getDateCreated());
 		copy.setDateDisabled(this.getDateDisabled());
 		copy.setDateUpdated(this.getDateUpdated());
 		copy.setEthnicityCode(this.getEthnicityCode());
 		copy.setEthnicityCodeDescription(this.getEthnicityCodeDescription());
 		copy.setExpired(this.isExpired());
 		copy.setGenderCode(this.getGenderCode());
 		copy.setGenderCodeDescription(this.getGenderCodeDescription());
 		copy.setGroup(this.getGroup());
 		copy.setGuardian(this.getGuardian());
 		copy.setId(this.getId());
 		copy.setLanguageCommunication(this.getLanguageCommunication());
 		copy.setMaritalStatus(this.getMaritalStatus());
		if (this.getPatientAdvancedDirectives() != null) {
			copy.getPatientAdvancedDirectives().addAll(this.getPatientAdvancedDirectives());
		}
		if (this.getPatientAllergies() != null) {
			copy.getPatientAllergies().addAll(this.getPatientAllergies());
		}
		if (this.getPatientEncounters() != null) {
			copy.getPatientEncounters().addAll(this.getPatientEncounters());
		}
		if (this.getPatientFamilyHistories() != null) {
			copy.getPatientFamilyHistories().addAll(this.getPatientFamilyHistories());
		}
		if (this.getPatientFuncCogStatuses() != null) {
			copy.getPatientFuncCogStatuses().addAll(this.getPatientFuncCogStatuses());
		}
		if (this.getPatientImmunizations() != null) {
			copy.getPatientImmunizations().addAll(this.getPatientImmunizations());
		}
		if (this.getPatientInstructions() != null) {
			copy.getPatientInstructions().addAll(this.getPatientInstructions());
		}
		if (this.getPatientMedicalEquipments() != null) {
			copy.getPatientMedicalEquipments().addAll(this.getPatientMedicalEquipments());
		}
		if (this.getPatientMedications() != null) {
			copy.getPatientMedications().addAll(this.getPatientMedications());
		}
		if (this.getPatientPayers() != null) {
			copy.getPatientPayers().addAll(this.getPatientPayers());
		}
		if (this.getPatientPhoneNumbers() != null) {
			copy.getPatientPhoneNumbers().addAll(this.getPatientPhoneNumbers());
		}
		if (this.getPatientPlanOfCares() != null) {
			copy.getPatientPlanOfCares().addAll(this.getPatientPlanOfCares());
		}
		if (this.getPatientProblems() != null) {
			copy.getPatientProblems().addAll(this.getPatientProblems());
		}
		if (this.getPatientProcedures() != null) {
			copy.getPatientProcedures().addAll(this.getPatientProcedures());
		}
		if (this.getPatientReasonForReferrals() != null) {
			copy.getPatientReasonForReferrals().addAll(this.getPatientReasonForReferrals());
		}
		if (this.getPatientReasonForVisits() != null) {
			copy.getPatientReasonForVisits().addAll(this.getPatientReasonForVisits());
		}
		if (this.getPatientResults() != null) {
			copy.getPatientResults().addAll(this.getPatientResults());
		}
		if (this.getPatientSocialHistories() != null) {
			copy.getPatientSocialHistories().addAll(this.getPatientSocialHistories());
		}
		if (this.getPatientVitalSigns() != null) {
			copy.getPatientVitalSigns().addAll(this.getPatientVitalSigns());
		}
 		copy.setRaceCode(this.getRaceCode());
 		copy.setRaceCodeDescription(this.getRaceCodeDescription());
 		copy.setReligiousAffiliations(this.getReligiousAffiliations());
		if (this.getResultPatients() != null) {
			copy.getResultPatients().addAll(this.getResultPatients());
		}
 		copy.setUserCreated(this.getUserCreated());
 		copy.setUserUpdated(this.getUserUpdated());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("dateDisabled: " + this.getDateDisabled() + ", ");
		sb.append("dateUpdated: " + this.getDateUpdated() + ", ");
		sb.append("ethnicityCodeDescription: " + this.getEthnicityCodeDescription() + ", ");
		sb.append("expired: " + this.isExpired() + ", ");
		sb.append("genderCodeDescription: " + this.getGenderCodeDescription() + ", ");
		sb.append("guardian: " + this.getGuardian() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("languageCommunication: " + this.getLanguageCommunication() + ", ");
		sb.append("maritalStatus: " + this.getMaritalStatus() + ", ");
		sb.append("raceCodeDescription: " + this.getRaceCodeDescription() + ", ");
		sb.append("religiousAffiliations: " + this.getReligiousAffiliations() + ", ");
		sb.append("userCreated: " + this.getUserCreated() + ", ");
		sb.append("userUpdated: " + this.getUserUpdated());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final PatientInfo that; 
		try {
			that = (PatientInfo) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		result = result && (((getDateDisabled() == null) && (that.getDateDisabled() == null)) || (getDateDisabled() != null && getDateDisabled().equals(that.getDateDisabled())));
		result = result && (((getDateUpdated() == null) && (that.getDateUpdated() == null)) || (getDateUpdated() != null && getDateUpdated().equals(that.getDateUpdated())));
		result = result && (((getEthnicityCode() == null) && (that.getEthnicityCode() == null)) || (getEthnicityCode() != null && getEthnicityCode().getId().equals(that.getEthnicityCode().getId())));	
		result = result && (((getEthnicityCodeDescription() == null) && (that.getEthnicityCodeDescription() == null)) || (getEthnicityCodeDescription() != null && getEthnicityCodeDescription().equals(that.getEthnicityCodeDescription())));
		result = result && (((isExpired() == null) && (that.isExpired() == null)) || (isExpired() != null && isExpired().equals(that.isExpired())));
		result = result && (((getGenderCode() == null) && (that.getGenderCode() == null)) || (getGenderCode() != null && getGenderCode().getId().equals(that.getGenderCode().getId())));	
		result = result && (((getGenderCodeDescription() == null) && (that.getGenderCodeDescription() == null)) || (getGenderCodeDescription() != null && getGenderCodeDescription().equals(that.getGenderCodeDescription())));
		result = result && (((getGroup() == null) && (that.getGroup() == null)) || (getGroup() != null && getGroup().getId().equals(that.getGroup().getId())));	
		result = result && (((getGuardian() == null) && (that.getGuardian() == null)) || (getGuardian() != null && getGuardian().equals(that.getGuardian())));
		result = result && (((getLanguageCommunication() == null) && (that.getLanguageCommunication() == null)) || (getLanguageCommunication() != null && getLanguageCommunication().equals(that.getLanguageCommunication())));
		result = result && (((getMaritalStatus() == null) && (that.getMaritalStatus() == null)) || (getMaritalStatus() != null && getMaritalStatus().equals(that.getMaritalStatus())));
		result = result && (((getRaceCode() == null) && (that.getRaceCode() == null)) || (getRaceCode() != null && getRaceCode().getId().equals(that.getRaceCode().getId())));	
		result = result && (((getRaceCodeDescription() == null) && (that.getRaceCodeDescription() == null)) || (getRaceCodeDescription() != null && getRaceCodeDescription().equals(that.getRaceCodeDescription())));
		result = result && (((getReligiousAffiliations() == null) && (that.getReligiousAffiliations() == null)) || (getReligiousAffiliations() != null && getReligiousAffiliations().equals(that.getReligiousAffiliations())));
		result = result && (((getUserCreated() == null) && (that.getUserCreated() == null)) || (getUserCreated() != null && getUserCreated().equals(that.getUserCreated())));
		result = result && (((getUserUpdated() == null) && (that.getUserUpdated() == null)) || (getUserUpdated() != null && getUserUpdated().equals(that.getUserUpdated())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
	@PreUpdate
	public void preUpdate() {
		this.dateUpdated = new Date();
	}
}
